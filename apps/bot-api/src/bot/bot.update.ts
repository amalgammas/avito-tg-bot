import { Command, Ctx, Help, Message, On, Start, Update } from 'nestjs-telegraf';
import { Logger } from '@nestjs/common';
import { Context } from 'telegraf';

import { SupplyWizardHandler } from './supply-wizard.handler';
import { UserCredentialsStore } from './user-credentials.store';
import { OzonCredentials } from '../config/ozon-api.service';
import { AdminNotifierService } from './admin-notifier.service';

@Update()
export class BotUpdate {
  private readonly logger = new Logger(BotUpdate.name);

  private readonly helpMessage = [
    '–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É –Ω–∞ Ozon:',
    ' 1. /start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–∞—Å—Ç–µ—Ä',
    ' 2. /ozon_keys ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∫–ª—é—á–∏',
    ' 3. /ozon_clear ‚Äî —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á–∏ –∏–∑ –±–∞–∑—ã',
    '',
    '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:',
    ' /ping ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–æ—Ç–∞'
  ].join('\n');

  constructor(
    private readonly wizard: SupplyWizardHandler,
    private readonly credentialsStore: UserCredentialsStore,
    private readonly adminNotifier: AdminNotifierService,
  ) {}

  @Start()
  async onStart(@Ctx() ctx: Context): Promise<void> {
    await this.wizard.start(ctx);
  }

  @Help()
  async onHelp(@Ctx() ctx: Context): Promise<void> {
    await ctx.reply(this.helpMessage);
  }

  @Command('ping')
  async onPing(@Ctx() ctx: Context): Promise<void> {
    await ctx.reply('pong üèì');
  }

  @Command('ozon_auth')
  async onOzonAuth(@Ctx() ctx: Context): Promise<void> {
    const chatId = this.extractChatId(ctx);
    if (!chatId) {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º.');
      return;
    }

    const args = this.parseCommandArgs(ctx);
    const [clientId, apiKey] = args;

    if (args.length < 2) {
      await ctx.reply(`–ü—Ä–æ–π–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ /start`);
      return;
    } else {
        await ctx.reply(`client_id: ${ this.maskValue(clientId) }\napi_key: ${ this.maskValue(apiKey) }`);
    }

    await this.credentialsStore.set(chatId, { clientId, apiKey });

    await ctx.reply(
      [
        '‚úÖ –ö–ª—é—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.'
      ].join('\n'),
    );

    await this.adminNotifier.notifyWizardEvent({
      ctx,
      event: 'auth.saved',
      lines: [`client_id: ${this.maskValue(clientId)}`],
    });

    await this.wizardWarmup(ctx, { clientId, apiKey });
  }

  @Command('ozon_clear')
  async onOzonClear(@Ctx() ctx: Context): Promise<void> {
    const chatId = this.extractChatId(ctx);
    if (!chatId) {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º.');
      return;
    }

    const credentials = await this.credentialsStore.get(chatId);
    if (!credentials) {
      await ctx.reply('–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π –Ω–µ—Ç.');
      return;
    }

    await this.credentialsStore.clear(chatId);
    await ctx.reply('‚úÖ –ö–ª—é—á–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã –±–æ—Ç–∞.');
    await this.wizard.start(ctx)

    await this.adminNotifier.notifyWizardEvent({
      ctx,
      event: 'auth.cleared',
    });
  }

  @Command('ozon_keys')
  async onOzonKeys(@Ctx() ctx: Context): Promise<void> {
    const chatId = this.extractChatId(ctx);
    if (!chatId) {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º.');
      return;
    }

    const credentials = await this.credentialsStore.get(chatId);
    if (!credentials) {
      await ctx.reply('–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π –Ω–µ—Ç. –ü—Ä–æ–π–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ /start.');
      return;
    }

    const updated = credentials.verifiedAt.toISOString();
    const lines = [
      '–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∫–ª—é—á–∏ (–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω—ã):',
      `‚Ä¢ client_id: ${this.maskValue(credentials.clientId)}`,
      `‚Ä¢ api_key: ${this.maskValue(credentials.apiKey)}`,
      `‚Ä¢ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${updated}`,
    ];

    await ctx.reply(lines.join('\n'));
  }

  @On('document')
  async onDocument(@Ctx() ctx: Context): Promise<void> {
    await this.wizard.handleDocument(ctx);
  }

  @On('text')
  async onText(@Ctx() ctx: Context, @Message('text') text?: string): Promise<void> {
    if (!text || text.startsWith('/')) {
      return;
    }

    const chatId = this.extractChatId(ctx);
    if (!chatId) {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º.');
      return;
    }

    const state = this.wizardState(chatId);
    if (!state) {
      await ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–∫–∏.');
      return;
    }

    if (state.stage === 'authApiKey') {
      await this.wizard.handleAuthApiKeyInput(ctx, chatId, state, text);
      return;
    }

    if (state.stage === 'authClientId') {
      await this.wizard.handleAuthClientIdInput(ctx, chatId, state, text);
      return;
    }

    if (state.stage === 'warehouseSelect') {
      await this.wizard.handleWarehouseSearch(ctx, chatId, state, text);
      return;
    }

    if (state.stage === 'awaitSpreadsheet') {
      await this.wizard.handleSpreadsheetLink(ctx, text);
      return;
    }

    if (
      state.stage === 'awaitDropOffQuery' ||
      state.stage === 'dropOffSelect' ||
      state.stage === 'clusterPrompt'
    ) {
      await this.wizard.handleDropOffSearch(ctx, text);
      return;
    }

    if (state.stage === 'awaitReadyDays') {
      await this.wizard.handleReadyDays(ctx, text);
      return;
    }

    await ctx.reply('–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.');
  }

  @On('callback_query')
  async onCallback(@Ctx() ctx: Context): Promise<void> {
    const data = (ctx.callbackQuery as any)?.data as string | undefined;
    if (!data) return;

    if (data.startsWith('wizard:')) {
      await this.wizard.handleCallback(ctx, data);
      return;
    }

    await ctx.answerCbQuery('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ');
  }

  private parseCommandArgs(ctx: Context): string[] {
    const messageText = (ctx.message as any)?.text ?? '';
    return messageText.trim().split(/\s+/).slice(1);
  }

  private extractChatId(ctx: Context): string | undefined {
    const chatId = (ctx.chat as any)?.id;
    if (typeof chatId === 'undefined' || chatId === null) {
      return undefined;
    }
    return String(chatId);
  }

  private maskValue(value: string): string {
    if (!value) return '‚Äî';
    if (value.length <= 6) {
      return `${value[0] ?? '*'}***${value[value.length - 1] ?? '*'}`;
    }
    return `${value.slice(0, 3)}***${value.slice(-3)}`;
  }

  private wizardState(chatId: string) {
    return this.wizard.getState(chatId);
  }

  private async wizardWarmup(ctx: Context, credentials: OzonCredentials): Promise<void> {
    this.logger.debug(`Credentials saved for wizard warmup: ${credentials.clientId}`);
    await ctx.reply('–ñ–¥—É –∑–∞–≥—Ä—É–∑–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–∑–∏—Ü–∏–π (–ê—Ä—Ç–∏–∫—É–ª + –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ).');
  }
}

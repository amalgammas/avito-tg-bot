import { Command, Ctx, Hears, Help, Message, On, Start, Update } from 'nestjs-telegraf';
import { Logger } from '@nestjs/common';
import { Context } from 'telegraf';

import { OzonApiService, OzonCredentials, OzonCluster } from '../config/ozon-api.service';
import { OzonSupplyService } from '../ozon/ozon-supply.service';
import { OzonSupplyProcessResult, OzonSupplyTask } from '../ozon/ozon-supply.types';
import { BotSessionStore, ClusterOption, FlowState } from './bot-session.store';
import { UserCredentialsStore } from './user-credentials.store';

@Update()
export class BotUpdate {
  private readonly logger = new Logger(BotUpdate.name);
  private readonly helpMessage = [
    '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç–∞–≤–∫–∏ Ozon.',
    '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:',
    ' /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
    ' /help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É –ø–æ–¥—Å–∫–∞–∑–∫—É',
    ' /ping ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ (–∫–Ω–æ–ø–∫–∞ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤—è–∑—å¬ª)',
    ' /id ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å chat_id –∏ user_id',
    ' /ozon_auth <CLIENT_ID> <API_KEY> ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–ª—é—á–∏',
    ' /ozon_clear ‚Äî —É–¥–∞–ª–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∫–ª—é—á–∏',
    ' /ozon_run [—Å—Å—ã–ª–∫–∞] ‚Äî –∑–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –ø–æ–∏—Å–∫–∞ —Ç–∞–π–º—Å–ª–æ—Ç–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–æ–∫ (–º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª)',
    ' /ozon_load <—Å—Å—ã–ª–∫–∞> ‚Äî –∑–∞–≥—Ä—É–∑–∏—Ç—å —à–∞–±–ª–æ–Ω, –≤—ã–±—Ä–∞—Ç—å –∫–ª–∞—Å—Ç–µ—Ä—ã –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É',
    ' /ozon_preview <—Å—Å—ã–ª–∫–∞> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –∏ —Ç–æ–≤–∞—Ä—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã',
    ' /ozon_keys ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∫–ª—é—á–∏ (–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω—ã)',
    ' /ozon_clusters ‚Äî –≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –∏ —Å–∫–ª–∞–¥–æ–≤',
    '',
    '–ï—Å–ª–∏ –∫–ª—é—á–µ–π –Ω–µ—Ç ‚Äî –Ω–∞–∂–º–∏ ¬´–í–≤–µ—Å—Ç–∏ –∫–ª—é—á–∏¬ª –≤ –º–µ–Ω—é.',
  ].join('\n');

  constructor(
    private readonly ozon: OzonApiService,
    private readonly supplyService: OzonSupplyService,
    private readonly credentialsStore: UserCredentialsStore,
    private readonly sessionStore: BotSessionStore,
  ) {}

  @Start()
  async onStart(@Ctx() ctx: Context): Promise<void> {
    const chatId = this.extractChatId(ctx);
    const hasCredentials = chatId ? this.credentialsStore.has(chatId) : false;

    const intro = hasCredentials
      ? '–ö–ª—é—á–∏ –Ω–∞–π–¥–µ–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:'
      : '–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ Client ID –∏ API Key Ozon ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /ozon_auth.';

    await ctx.reply(intro, {
      reply_markup: {
        inline_keyboard: this.buildMenu(hasCredentials, chatId),
      },
    });
  }

  @Help()
  async onHelp(@Ctx() ctx: Context): Promise<void> {
    await ctx.reply(this.helpMessage);
  }

  @Command('ping')
  async onPing(@Ctx() ctx: Context): Promise<void> {
    await ctx.reply('pong üèì');
  }

  @Command('id')
  async onId(@Ctx() ctx: Context): Promise<void> {
    const chatId = (ctx.chat as any)?.id;
    const userId = (ctx.from as any)?.id;
    await ctx.reply(`chat_id: ${chatId}\nuser_id: ${userId}`);
  }

  @Command('ozon_auth')
  async onOzonAuth(@Ctx() ctx: Context): Promise<void> {
    const chatId = this.extractChatId(ctx);
    if (!chatId) {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º.');
      return;
    }

    const args = this.parseCommandArgs(ctx);
    if (args.length < 2) {
      await ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ozon_auth <CLIENT_ID> <API_KEY>');
      return;
    }

    const [clientId, apiKey] = args;
    const credentials: OzonCredentials = { clientId, apiKey };

    this.credentialsStore.set(chatId, credentials);

    await ctx.reply(
      [
        '‚úÖ –ö–ª—é—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.',
        '–ß—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤—Å—ë –Ω–∞ –º–µ—Å—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/ozon_keys` –∏–ª–∏ —Å—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–π—Ç–µ `/ozon_run`.',
      ].join('\n'),
      { parse_mode: 'Markdown' },
    );

    await this.prefetchClusters(ctx, chatId, credentials);
  }

  @Command('ozon_clear')
  async onOzonClear(@Ctx() ctx: Context): Promise<void> {
    const chatId = this.extractChatId(ctx);
    if (!chatId) {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º.');
      return;
    }

    if (!this.credentialsStore.has(chatId)) {
      await ctx.reply('–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π –Ω–µ—Ç.');
      return;
    }

    this.credentialsStore.clear(chatId);
    await ctx.reply('‚úÖ –ö–ª—é—á–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –ø–∞–º—è—Ç–∏ –±–æ—Ç–∞ (RAM).');
  }

  @Command('ozon_keys')
  async onOzonKeys(@Ctx() ctx: Context): Promise<void> {
    const entries = this.credentialsStore.entries();
    if (!entries.length) {
      await ctx.reply('–•—Ä–∞–Ω–∏–ª–∏—â–µ –ø—É—Å—Ç–æ–µ. –î–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á–∏ —á–µ—Ä–µ–∑ /ozon_auth.');
      return;
    }

    const lines = entries.map(({ chatId, credentials }) => {
      const updated = credentials.verifiedAt.toISOString();
      return `‚Ä¢ chat_id: ${chatId}, client_id: ${this.maskValue(credentials.clientId)}, api_key: ${this.maskValue(credentials.apiKey)}, updated: ${updated}`;
    });

    await this.replyLines(ctx, ['–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∫–ª—é—á–∏ (–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω—ã):', ...lines]);
  }

  @Command('ozon_clusters')
  async onOzonClusters(@Ctx() ctx: Context): Promise<void> {
    const chatId = this.extractChatId(ctx);
    const stored = chatId ? this.credentialsStore.get(chatId) : undefined;
    const hasEnv = await this.hasEnvCredentials();

    if (!stored && !hasEnv) {
      await ctx.reply(
        '–°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–ª—é—á–∏ —á–µ—Ä–µ–∑ /ozon_auth <CLIENT_ID> <API_KEY> –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ .env.',
      );
      return;
    }

    try {
      const clusters = await this.ozon.listClusters({}, stored ?? undefined);
      if (!clusters.length) {
        await ctx.reply('–ö–ª–∞—Å—Ç–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
        return;
      }

      this.updateStoredClusters(chatId, clusters);

      const lines = clusters.map((cluster) => {
        const warehouses = (cluster.logistic_clusters ?? [])
          .flatMap((lc) => lc.warehouses ?? [])
          .map((wh) => wh.name)
          .filter(Boolean)
          .slice(0, 5);
        const suffix = warehouses.length
          ? ` ‚Äî —Å–∫–ª–∞–¥—ã: ${warehouses.join(', ')}${
              (cluster.logistic_clusters ?? [])
                .flatMap((lc) => lc.warehouses ?? []).length > warehouses.length
                ? ', ‚Ä¶'
                : ''
            }`
          : '';
        return `‚Ä¢ ${cluster.name ?? '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'} (ID: ${cluster.id})${suffix}`;
      });

      await this.replyLines(ctx, ['–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª–∞—Å—Ç–µ—Ä—ã:', ...lines]);
    } catch (error) {
      await ctx.reply(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤: ${this.formatError(error)}`);
      await this.safeSendErrorPayload(ctx, error);
    }
  }

  @Command('ozon_run')
  async onOzonRun(@Ctx() ctx: Context): Promise<void> {
    const chatId = this.extractChatId(ctx);
    if (!chatId) {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º –¥–∏–∞–ª–æ–≥–µ —Å –±–æ—Ç–æ–º.');
      return;
    }

    const args = this.parseCommandArgs(ctx);
    const spreadsheetOverride = args[0];

    const storedCreds = this.credentialsStore.get(chatId);
    const hasEnv = await this.hasEnvCredentials();
    if (!storedCreds && !hasEnv) {
      await ctx.reply(
        'üîê –°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ –∫–ª—é—á–∏: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ozon_auth <CLIENT_ID> <API_KEY> –∏–ª–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ .env.',
      );
      return;
    }

    const credentials = storedCreds ?? undefined;
    const credsSource = storedCreds ? 'chat' : 'env';
    const sheetMsg = spreadsheetOverride ? `, —Ç–∞–±–ª–∏—Ü–∞: ${spreadsheetOverride}` : '';

    if (!spreadsheetOverride && !this.supplyService.hasDefaultSpreadsheet()) {
      await ctx.reply(
        '–ù–µ —É–∫–∞–∑–∞–Ω —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏. –ü–µ—Ä–µ–¥–∞–π—Ç–µ —Å—Å—ã–ª–∫—É –∫–æ–º–∞–Ω–¥–æ–π `/ozon_run <—Å—Å—ã–ª–∫–∞>` –ª–∏–±–æ –∑–∞–¥–∞–π—Ç–µ `OZON_SUPPLY_SPREADSHEET_ID` –≤ .env.',
        { parse_mode: 'Markdown' },
      );
      return;
    }

    await ctx.reply(
      `–ó–∞–ø—É—Å–∫–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–¥–∞—á (–∫–ª—é—á–∏: ${credsSource}${sheetMsg}). –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è.`,
    );

    try {
      const tasks = await this.supplyService.prepareTasks({
        credentials,
        spreadsheet: spreadsheetOverride,
      });
      if (!tasks.size) {
        await ctx.reply('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –≤ —Ç–∞–±–ª–∏—Ü–µ.');
        return;
      }

      const clusterLines = this.supplyService.getClustersOverview(tasks);
      this.updateStoredClusters(chatId, this.supplyService.getCachedClusters());
      if (clusterLines.length) {
        await this.replyLines(ctx, ['–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞—Å—Ç–µ—Ä—ã/—Å–∫–ª–∞–¥—ã:', ...clusterLines]);
      }

      await ctx.reply(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–¥–∞—á: ${tasks.size}. –ù–∞—á–∏–Ω–∞—é –æ–ø—Ä–æ—Å.`);

      await this.supplyService.processTasks(tasks, {
        credentials,
        onEvent: async (result) => this.sendSupplyEvent(ctx, result),
        delayBetweenCallsMs: this.supplyService.getPollIntervalMs(),
      });

      await ctx.reply('‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.');
    } catch (error) {
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${this.formatError(error)}`);
      await this.safeSendErrorPayload(ctx, error);
    }
  }

  @Command('ozon_load')
  async onOzonLoad(@Ctx() ctx: Context): Promise<void> {
    const chatId = this.extractChatId(ctx);
    if (!chatId) {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º.');
      return;
    }

    const args = this.parseCommandArgs(ctx);
    if (!args.length) {
      await ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ozon_load <—Å—Å—ã–ª–∫–∞ –∏–ª–∏ ID Google Sheets>');
      return;
    }

    const spreadsheet = args[0];
    const storedCreds = this.credentialsStore.get(chatId);
    const hasEnv = await this.hasEnvCredentials();

    if (!storedCreds && !hasEnv) {
      await ctx.reply(
        'üîê –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–ª—é—á–∏ —á–µ—Ä–µ–∑ /ozon_auth <CLIENT_ID> <API_KEY> –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ .env.',
      );
      return;
    }

    await ctx.reply('–ó–∞–≥—Ä—É–∂–∞—é —à–∞–±–ª–æ–Ω, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥...');

    try {
      const tasks = await this.supplyService.prepareTasks({
        credentials: storedCreds ?? undefined,
        spreadsheet,
      });

      const { validTasks, clusterOptions, missingCluster, missingWarehouse } = this.prepareFlowFromTasks(
        tasks,
        this.supplyService.getCachedClusters(),
      );

      if (!validTasks.length) {
        await ctx.reply(
          '–í —Ç–∞–±–ª–∏—Ü–µ –Ω–µ—Ç –∑–∞–¥–∞—á —Å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º–∏ –∫–ª–∞—Å—Ç–µ—Ä–æ–º –∏ —Å–∫–ª–∞–¥–æ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ city –∏ warehouse_name.',
        );
        return;
      }

      const state = this.sessionStore.setFlowState(chatId, {
        spreadsheet,
        tasks: this.cloneTasks(validTasks),
        clusterOptions,
        selectedClusterIds: new Set<number>(),
        selectionMessageId: undefined,
      });

      const view = this.buildClusterSelectionView(state);
      const sent = await ctx.reply(view.text, {
        reply_markup: { inline_keyboard: view.keyboard },
      });

      this.sessionStore.updateFlowState(chatId, (current) => {
        if (!current) return undefined;
        return { ...current, selectionMessageId: (sent as any)?.message_id ?? current.selectionMessageId };
      });

      await this.reportSkippedTasks(ctx, missingCluster, missingWarehouse);
    } catch (error) {
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —à–∞–±–ª–æ–Ω–∞: ${this.formatError(error)}`);
      await this.safeSendErrorPayload(ctx, error);
    }
  }

  private async safeSendErrorPayload(ctx: Context, error: unknown): Promise<void> {
    const payload = this.extractErrorPayload(error);
    if (!payload) {
      return;
    }

    const payloadLines = payload.split(/\r?\n/);
    await this.replyLines(ctx, ['–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', '```', ...payloadLines, '```'], {
      parse_mode: 'Markdown',
    }, 'error-details');
  }

  @Command('ozon_preview')
  async onOzonPreview(@Ctx() ctx: Context): Promise<void> {
    const args = this.parseCommandArgs(ctx);
    if (!args.length) {
      await ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ozon_preview <—Å—Å—ã–ª–∫–∞ –∏–ª–∏ ID Google Sheets>');
      return;
    }

    const spreadsheet = args[0];
    const chatId = this.extractChatId(ctx);
    const storedCreds = chatId ? this.credentialsStore.get(chatId) : undefined;
    const hasEnv = await this.hasEnvCredentials();

    if (!storedCreds && !hasEnv) {
      await ctx.reply(
        'üîê –î–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω—É–∂–Ω—ã –∫–ª—é—á–∏ Ozon. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /ozon_auth –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ .env.',
      );
      return;
    }

    await ctx.reply('–ó–∞–≥—Ä—É–∂–∞—é —Ç–∞–±–ª–∏—Ü—É, —ç—Ç–æ –∑–∞–π–º—ë—Ç –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥...');

    try {
      const tasks = await this.supplyService.prepareTasks({
        credentials: storedCreds ?? undefined,
        spreadsheet,
      });

      if (!tasks.size) {
        await ctx.reply('–í —Ç–∞–±–ª–∏—Ü–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á.');
        return;
      }

      const clusterLines = this.supplyService.getClustersOverview(tasks);
      const messages = this.formatTasksPreview(tasks, clusterLines);
      for (const message of messages) {
        await ctx.reply(message, { parse_mode: 'Markdown' });
      }
    } catch (error) {
      await ctx.reply(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É: ${this.formatError(error)}`);
      await this.safeSendErrorPayload(ctx, error);
    }
  }

  @On('callback_query')
  async onCallback(@Ctx() ctx: Context): Promise<void> {
    const data = (ctx.callbackQuery as any)?.data as string | undefined;
    if (!data) return;

    if (data.startsWith('flow:')) {
      await this.handleFlowCallback(ctx, data);
      return;
    }

    switch (data) {
      case 'action:enter_creds':
        await ctx.answerCbQuery();
        await ctx.reply(
          '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É `/ozon_auth <CLIENT_ID> <API_KEY>`\n' +
            '–ü—Ä–∏–º–µ—Ä: `/ozon_auth 123456 abcdef...`',
          { parse_mode: 'Markdown' },
        );
        break;
      case 'action:run':
        await ctx.answerCbQuery();
        if (!this.credentialsStore.has(this.extractChatId(ctx) ?? '')) {
          await ctx.reply('–°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–ª—é—á–∏ —á–µ—Ä–µ–∑ /ozon_auth <CLIENT_ID> <API_KEY>.');
          break;
        }
        await this.onOzonRun(ctx);
        break;
      case 'action:keys':
        await ctx.answerCbQuery();
        await this.onOzonKeys(ctx);
        break;
      case 'action:clusters':
        await ctx.answerCbQuery();
        await this.onOzonClusters(ctx);
        break;
      case 'action:load':
        await ctx.answerCbQuery();
        await ctx.reply(
          '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Google Sheets –∫–æ–º–∞–Ω–¥–æ–π `/ozon_load <—Å—Å—ã–ª–∫–∞>` ‚Äî –±–æ—Ç –∑–∞–≥—Ä—É–∑–∏—Ç —à–∞–±–ª–æ–Ω –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –≤—ã–±—Ä–∞—Ç—å –∫–ª–∞—Å—Ç–µ—Ä—ã.',
          { parse_mode: 'Markdown' },
        );
        break;
      case 'action:ping':
        await ctx.answerCbQuery('pong üèì');
        await ctx.reply('pong üèì');
        break;
      case 'action:help':
        await ctx.answerCbQuery();
        await this.onHelp(ctx);
        break;
      default:
        await ctx.answerCbQuery('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ');
        break;
    }
  }

  private async handleFlowCallback(ctx: Context, rawData: string): Promise<void> {
    const chatId = this.extractChatId(ctx);
    if (!chatId) {
      await ctx.answerCbQuery('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Ç');
      return;
    }

    const messageId = (ctx.callbackQuery as any)?.message?.message_id;
    const action = rawData.split(':')[1];
    if (!action) {
      await ctx.answerCbQuery('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ');
      return;
    }

    switch (action) {
      case 'cluster': {
        const payload = rawData.split(':')[2];
        const clusterId = Number(payload);
        if (!payload || Number.isNaN(clusterId)) {
          await ctx.answerCbQuery('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Ç–µ—Ä');
          return;
        }

        const updated = this.sessionStore.updateFlowState(chatId, (current) => {
          if (!current) return undefined;
          const selected = new Set<number>(current.selectedClusterIds);
          if (selected.has(clusterId)) {
            selected.delete(clusterId);
          } else {
            selected.add(clusterId);
          }
          return { ...current, selectedClusterIds: selected, selectionMessageId: messageId ?? current.selectionMessageId };
        });

        if (!updated) {
          await ctx.answerCbQuery('–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞');
          return;
        }

        await this.refreshClusterSelectionMessage(ctx, chatId, updated, messageId);
        await ctx.answerCbQuery(
          updated.selectedClusterIds.has(clusterId) ? '–ö–ª–∞—Å—Ç–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω' : '–ö–ª–∞—Å—Ç–µ—Ä –∏—Å–∫–ª—é—á—ë–Ω',
        );
        return;
      }
      case 'select_all': {
        const updated = this.sessionStore.updateFlowState(chatId, (current) => {
          if (!current) return undefined;
          const all = current.clusterOptions.map((option) => option.id);
          return {
            ...current,
            selectedClusterIds: new Set<number>(all),
            selectionMessageId: messageId ?? current.selectionMessageId,
          };
        });

        if (!updated) {
          await ctx.answerCbQuery('–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞');
          return;
        }

        await this.refreshClusterSelectionMessage(ctx, chatId, updated, messageId);
        await ctx.answerCbQuery('–í—ã–±—Ä–∞–Ω—ã –≤—Å–µ –∫–ª–∞—Å—Ç–µ—Ä—ã');
        return;
      }
      case 'clear': {
        const updated = this.sessionStore.updateFlowState(chatId, (current) => {
          if (!current) return undefined;
          return {
            ...current,
            selectedClusterIds: new Set<number>(),
            selectionMessageId: messageId ?? current.selectionMessageId,
          };
        });

        if (!updated) {
          await ctx.answerCbQuery('–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞');
          return;
        }

        await this.refreshClusterSelectionMessage(ctx, chatId, updated, messageId);
        await ctx.answerCbQuery('–í—ã–±–æ—Ä –æ—á–∏—â–µ–Ω');
        return;
      }
      case 'preview':
        await this.sendFlowPreview(ctx, chatId);
        return;
      case 'start':
        await this.startFlowProcessing(ctx, chatId);
        return;
      case 'cancel': {
        this.sessionStore.clearFlowState(chatId);
        await ctx.answerCbQuery('–í—ã–±–æ—Ä –æ—Ç–º–µ–Ω—ë–Ω');
        if (messageId) {
          try {
            const rawChatId = (ctx.callbackQuery as any)?.message?.chat?.id ?? chatId;
            await ctx.telegram.editMessageText(rawChatId, messageId, undefined, '–í—ã–±–æ—Ä –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –æ—Ç–º–µ–Ω—ë–Ω.');
          } catch (error) {
            this.logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã: ${this.formatError(error)}`);
          }
        }
        return;
      }
      default:
        await ctx.answerCbQuery('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ');
        return;
    }
  }

  private async refreshClusterSelectionMessage(
    ctx: Context,
    chatId: string,
    state: FlowState,
    messageId?: number,
  ): Promise<void> {
    const view = this.buildClusterSelectionView(state);
    const targetMessageId = messageId ?? state.selectionMessageId;
    const rawChatId = (ctx.callbackQuery as any)?.message?.chat?.id ?? chatId;
    if (!targetMessageId) {
      return;
    }

    try {
      await ctx.telegram.editMessageText(rawChatId, targetMessageId, undefined, view.text, {
        reply_markup: { inline_keyboard: view.keyboard },
      });
    } catch (error) {
      this.logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤—ã–±–æ—Ä –∫–ª–∞—Å—Ç–µ—Ä–æ–≤: ${this.formatError(error)}`);
    }
  }

  private async startFlowProcessing(ctx: Context, chatId: string): Promise<void> {
    const state = this.sessionStore.getFlowState(chatId);
    if (!state) {
      await ctx.answerCbQuery('–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞');
      return;
    }

    if (!state.selectedClusterIds.size) {
      await ctx.answerCbQuery('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Ç–µ—Ä');
      await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º—É–º –æ–¥–∏–Ω –∫–ª–∞—Å—Ç–µ—Ä –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—É—Å–∫.');
      return;
    }

    const selectedOptions = state.clusterOptions.filter((option) =>
      state.selectedClusterIds.has(option.id),
    );
    const tasksToRun = state.tasks.filter(
      (task) => task.clusterId && state.selectedClusterIds.has(task.clusterId),
    );

    if (!tasksToRun.length) {
      await ctx.answerCbQuery('–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–ª–∞—Å—Ç–µ—Ä–æ–≤');
      await ctx.reply('–î–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –Ω–µ –Ω–∞—à–ª–æ—Å—å –∑–∞–¥–∞—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ.');
      return;
    }

    const messageId = (ctx.callbackQuery as any)?.message?.message_id ?? state.selectionMessageId;
    if (messageId) {
      try {
        const rawChatId = (ctx.callbackQuery as any)?.message?.chat?.id ?? chatId;
        await ctx.telegram.editMessageText(
          rawChatId,
          messageId,
          undefined,
          'üöÄ –ó–∞–ø—É—Å–∫–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–ª–∞—Å—Ç–µ—Ä–æ–≤...',
        );
      } catch (error) {
        this.logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º: ${this.formatError(error)}`);
      }
    }

    await ctx.answerCbQuery('–ó–∞–ø—É—Å–∫–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É');
    this.sessionStore.clearFlowState(chatId);
    await this.runSelectedTasks(ctx, chatId, selectedOptions, tasksToRun, state.spreadsheet);
  }

  private async runSelectedTasks(
    ctx: Context,
    chatId: string,
    selectedOptions: ClusterOption[],
    tasks: OzonSupplyTask[],
    spreadsheet: string,
  ): Promise<void> {
    const storedCreds = this.credentialsStore.get(chatId);
    const hasEnv = await this.hasEnvCredentials();

    if (!storedCreds && !hasEnv) {
      await ctx.reply('üîê –ö–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ /ozon_auth –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞.');
      return;
    }

    const summaryLines = selectedOptions.map(
      (option) => `‚Ä¢ ${option.name} ‚Äî –∑–∞–¥–∞—á: ${option.taskCount}`,
    );

    await ctx.reply(
      [
        '–ó–∞–ø—É—Å–∫–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–ª–∞—Å—Ç–µ—Ä–æ–≤.',
        `–ò—Å—Ç–æ—á–Ω–∏–∫: ${this.describeSpreadsheet(spreadsheet)}`,
        '',
        '–ö–ª–∞—Å—Ç–µ—Ä—ã:',
        ...summaryLines,
        '',
        `–í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${tasks.length}`,
      ].join('\n'),
    );

    const taskMap = new Map<string, OzonSupplyTask>();
    for (const task of this.cloneTasks(tasks)) {
      taskMap.set(task.taskId, task);
    }

    try {
      await this.supplyService.processTasks(taskMap, {
        credentials: storedCreds ?? undefined,
        onEvent: async (result) => this.sendSupplyEvent(ctx, result),
        delayBetweenCallsMs: this.supplyService.getPollIntervalMs(),
      });
      await ctx.reply('‚úÖ –í—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.');
    } catch (error) {
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: ${this.formatError(error)}`);
      await this.safeSendErrorPayload(ctx, error);
    }
  }

  private async sendFlowPreview(ctx: Context, chatId: string): Promise<void> {
    const state = this.sessionStore.getFlowState(chatId);
    if (!state) {
      await ctx.answerCbQuery('–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞');
      return;
    }

    if (!state.tasks.length) {
      await ctx.answerCbQuery('–ß–µ—Ä–Ω–æ–≤–∏–∫ –ø—É—Å—Ç');
      await ctx.reply('–í —Ç–µ–∫—É—â–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫–µ –Ω–µ—Ç –∑–∞–¥–∞—á.');
      return;
    }

    const taskMap = new Map<string, OzonSupplyTask>();
    for (const task of this.cloneTasks(state.tasks)) {
      taskMap.set(task.taskId, task);
    }

    const clusterLines = this.supplyService.getClustersOverview(taskMap);
    const previewMessages = this.formatTasksPreview(taskMap, clusterLines);

    if (!previewMessages.length) {
      await ctx.answerCbQuery('–ù–µ—á–µ–≥–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å');
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —à–∞–±–ª–æ–Ω –∑–∞–Ω–æ–≤–æ.');
      return;
    }

    await ctx.answerCbQuery('–ß–µ—Ä–Ω–æ–≤–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
    await ctx.reply(`–ß–µ—Ä–Ω–æ–≤–∏–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–¥–∞—á: ${state.tasks.length}. –ù–∏–∂–µ —Å–ø–∏—Å–æ–∫.`);
    for (const message of previewMessages) {
      await ctx.reply(message, { parse_mode: 'Markdown' });
    }
  }

  private buildClusterSelectionView(state: FlowState): {
    text: string;
    keyboard: Array<Array<{ text: string; callback_data: string }>>;
  } {
    const selected = state.clusterOptions.filter((option) =>
      state.selectedClusterIds.has(option.id),
    );
    const selectedLines = selected.length
      ? selected.map((option) => `‚Ä¢ ${option.name} ‚Äî –∑–∞–¥–∞—á: ${option.taskCount}`)
      : ['‚Äî –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ ‚Äî'];

    const lines = [
      '–®–∞–±–ª–æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω.',
      `–ò—Å—Ç–æ—á–Ω–∏–∫: ${this.describeSpreadsheet(state.spreadsheet)}`,
      `–ó–∞–¥–∞—á —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∫–ª–∞—Å—Ç–µ—Ä–∞–º–∏: ${state.tasks.length}`,
      '',
      '–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Ç–µ—Ä—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞ (–Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å):',
      '–ù—É–∂–Ω–æ —Å–≤–µ—Ä–∏—Ç—å—Å—è —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º? –ù–∞–∂–º–∏ ¬´–ü—Ä–æ—Å–º–æ—Ç—Ä —á–µ—Ä–Ω–æ–≤–∏–∫–∞¬ª.',
      '',
      '–í—ã–±—Ä–∞–Ω—ã:',
      ...selectedLines,
    ];

    const clusterButtons = state.clusterOptions.map((option) => [
      {
        text: `${state.selectedClusterIds.has(option.id) ? '‚úÖ' : '‚¨úÔ∏è'} ${option.name} (${option.taskCount})`,
        callback_data: `flow:cluster:${option.id}`,
      },
    ]);

    const controls: Array<Array<{ text: string; callback_data: string }>> = [];
    if (state.clusterOptions.length > 1) {
      controls.push([
        { text: '–í—ã–±—Ä–∞—Ç—å –≤—Å–µ', callback_data: 'flow:select_all' },
        { text: '–û—á–∏—Å—Ç–∏—Ç—å', callback_data: 'flow:clear' },
      ]);
    }
    controls.push([{ text: '–ü—Ä–æ—Å–º–æ—Ç—Ä —á–µ—Ä–Ω–æ–≤–∏–∫–∞', callback_data: 'flow:preview' }]);
    controls.push([
      { text: '–ó–∞–ø—É—Å—Ç–∏—Ç—å', callback_data: 'flow:start' },
      { text: '–û—Ç–º–µ–Ω–∞', callback_data: 'flow:cancel' },
    ]);

    return { text: lines.join('\n'), keyboard: [...clusterButtons, ...controls] };
  }

  private prepareFlowFromTasks(
    tasks: Map<string, OzonSupplyTask>,
    clusters: OzonCluster[],
  ): {
    validTasks: OzonSupplyTask[];
    clusterOptions: ClusterOption[];
    missingCluster: OzonSupplyTask[];
    missingWarehouse: OzonSupplyTask[];
  } {
    const clusterName = new Map<number, string>();
    for (const cluster of clusters) {
      if (typeof cluster.id === 'number') {
        clusterName.set(cluster.id, cluster.name ?? `–ö–ª–∞—Å—Ç–µ—Ä ${cluster.id}`);
      }
    }

    const counters = new Map<number, ClusterOption>();
    const validTasks: OzonSupplyTask[] = [];
    const missingCluster: OzonSupplyTask[] = [];
    const missingWarehouse: OzonSupplyTask[] = [];

    for (const task of tasks.values()) {
      if (!task.clusterId) {
        missingCluster.push(task);
        continue;
      }

      if (!task.warehouseId) {
        missingWarehouse.push(task);
        continue;
      }

      validTasks.push(task);

      const existing = counters.get(task.clusterId);
      if (existing) {
        existing.taskCount += 1;
        continue;
      }

      counters.set(task.clusterId, {
        id: task.clusterId,
        name: clusterName.get(task.clusterId) ?? `–ö–ª–∞—Å—Ç–µ—Ä ${task.clusterId}`,
        taskCount: 1,
      });
    }

    const clusterOptions = [...counters.values()].sort((a, b) =>
      a.name.localeCompare(b.name, 'ru', { sensitivity: 'base' }),
    );

    return { validTasks, clusterOptions, missingCluster, missingWarehouse };
  }

  private cloneTasks(tasks: Iterable<OzonSupplyTask>): OzonSupplyTask[] {
    const result: OzonSupplyTask[] = [];
    for (const task of tasks) {
      result.push({
        ...task,
        items: task.items.map((item) => ({ ...item })),
      });
    }
    return result;
  }

  private async reportSkippedTasks(
    ctx: Context,
    missingCluster: OzonSupplyTask[],
    missingWarehouse: OzonSupplyTask[],
  ): Promise<void> {
    if (!missingCluster.length && !missingWarehouse.length) {
      return;
    }

    if (missingCluster.length) {
      const lines = this.formatTaskRefs(missingCluster, 6);
      await ctx.reply(
        ['‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–ª–∞—Å—Ç–µ—Ä –¥–ª—è –∑–∞–¥–∞—á:', ...lines].join('\n'),
      );
    }

    if (missingWarehouse.length) {
      const lines = this.formatTaskRefs(missingWarehouse, 6);
      await ctx.reply(
        ['‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–∫–ª–∞–¥ –¥–ª—è –∑–∞–¥–∞—á:', ...lines].join('\n'),
      );
    }
  }

  private formatTaskRefs(tasks: OzonSupplyTask[], limit: number): string[] {
    const rows = tasks.slice(0, limit).map((task) => {
      const city = task.city ? `, ${task.city}` : '';
      return `‚Ä¢ ${task.taskId}${city}`;
    });
    if (tasks.length > limit) {
      rows.push(`‚Ä¶ –∏ –µ—â—ë ${tasks.length - limit}`);
    }
    return rows;
  }

  private describeSpreadsheet(value: string): string {
    const trimmed = (value ?? '').trim();
    if (!trimmed) return '‚Äî';
    if (trimmed.length <= 80) return trimmed;
    return `${trimmed.slice(0, 40)}‚Ä¶${trimmed.slice(-20)}`;
  }

  @Hears(/^–ø—Ä–∏–≤–µ—Ç$/i)
  async onHello(@Ctx() ctx: Context): Promise<void> {
    await ctx.reply('–ò —Ç–µ–±–µ –ø—Ä–∏–≤–µ—Ç! üëã');
  }

  @On('text')
  async onText(@Ctx() ctx: Context, @Message('text') text?: string): Promise<void> {
    if (!text || text.startsWith('/')) return;
    await ctx.reply('–ù–µ –ø–æ–Ω—è–ª –∑–∞–ø—Ä–æ—Å ü§î. –ù–∞–∂–º–∏ /help –∏–ª–∏ /start.');
  }

  private parseCommandArgs(ctx: Context): string[] {
    const messageText = (ctx.message as any)?.text ?? '';
    return messageText.trim().split(/\s+/).slice(1);
  }

  private extractChatId(ctx: Context): string | undefined {
    const chatId = (ctx.chat as any)?.id;
    if (typeof chatId === 'undefined' || chatId === null) {
      return undefined;
    }
    return String(chatId);
  }

  private formatError(error: unknown): string {
    if (!error) return 'unknown error';
    if (typeof error === 'string') return error;
    const asAny = error as any;
    if (asAny?.response?.data) {
      try {
        return JSON.stringify(asAny.response.data);
      } catch (err) {
        return asAny.message ?? '–û—à–∏–±–∫–∞ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è';
      }
    }
    return asAny?.message ?? '–û—à–∏–±–∫–∞ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è';
  }

  private buildMenu(hasCredentials: boolean, chatId?: string | undefined) {
    if (!hasCredentials) {
      return [
        [{ text: '–í–≤–µ—Å—Ç–∏ –∫–ª—é—á–∏', callback_data: 'action:enter_creds' }],
        [{ text: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫', callback_data: 'action:run' }],
        [{ text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤—è–∑—å', callback_data: 'action:ping' }],
        [{ text: '–ü–æ–º–æ—â—å', callback_data: 'action:help' }],
      ];
    }

    const rows: Array<Array<{ text: string; callback_data: string }>> = [];
    const clustersCached = chatId
      ? this.credentialsStore.get(chatId)?.clusters ?? []
      : [];

    if (clustersCached.length) {
      rows.push([{ text: '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª–∞—Å—Ç–µ—Ä—ã', callback_data: 'action:clusters' }]);
    }

    rows.push([{ text: '–ó–∞–≥—Ä—É–∑–∏—Ç—å —à–∞–±–ª–æ–Ω', callback_data: 'action:load' }]);
    rows.push([{ text: '–ü–æ–∫–∞–∑–∞—Ç—å –∫–ª—é—á–∏', callback_data: 'action:keys' }]);
    rows.push([{ text: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫', callback_data: 'action:run' }]);
    rows.push([{ text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤—è–∑—å', callback_data: 'action:ping' }]);
    rows.push([{ text: '–û–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á–∏', callback_data: 'action:enter_creds' }]);
    rows.push([{ text: '–ü–æ–º–æ—â—å', callback_data: 'action:help' }]);

    return rows;
  }

  private async sendSupplyEvent(ctx: Context, result: OzonSupplyProcessResult): Promise<void> {
    const chatId = this.extractChatId(ctx);
    if (!chatId) return;

    const message = this.formatSupplyEvent(result);
    if (!message) return;

    await ctx.telegram.sendMessage(chatId, message);
  }

  private formatSupplyEvent({ task, event, message }: OzonSupplyProcessResult): string | undefined {
    const prefix = `[${task.taskId}]`;
    switch (event) {
      case 'draftCreated':
        return `${prefix} –ß–µ—Ä–Ω–æ–≤–∏–∫ —Å–æ–∑–¥–∞–Ω. ${message ?? ''}`.trim();
      case 'draftValid':
        return `${prefix} –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–µ—Ä–Ω–æ–≤–∏–∫. ${message ?? ''}`.trim();
      case 'draftExpired':
        return `${prefix} –ß–µ—Ä–Ω–æ–≤–∏–∫ —É—Å—Ç–∞—Ä–µ–ª, —Å–æ–∑–¥–∞—ë–º –∑–∞–Ω–æ–≤–æ.`;
      case 'draftInvalid':
        return `${prefix} –ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π, –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º.`;
      case 'draftError':
        return `${prefix} –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–Ω–æ–≤–∏–∫–∞.${message ? ` ${message}` : ''}`;
      case 'timeslotMissing':
        return `${prefix} –°–≤–æ–±–æ–¥–Ω—ã—Ö —Ç–∞–π–º—Å–ª–æ—Ç–æ–≤ –Ω–µ—Ç.`;
      case 'supplyCreated':
        return `${prefix} ‚úÖ –ü–æ—Å—Ç–∞–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞. ${message ?? ''}`.trim();
      case 'noCredentials':
      case 'error':
        return `${prefix} ‚ùå ${message ?? '–û—à–∏–±–∫–∞'}`;
      default:
        return message ? `${prefix} ${message}` : undefined;
    }
  }

  private async hasEnvCredentials(): Promise<boolean> {
    const clientId = process.env.OZON_CLIENT_ID ?? '';
    const apiKey = process.env.OZON_API_KEY ?? '';
    return Boolean(clientId && apiKey);
  }

  private maskValue(value: string): string {
    if (!value) return '‚Äî';
    if (value.length <= 6) {
      return `${value[0] ?? '*'}***${value[value.length - 1] ?? '*'}`;
    }
    return `${value.slice(0, 3)}***${value.slice(-3)}`;
  }

  private formatTasksPreview(tasks: Map<string, OzonSupplyTask>, clusterLines: string[]): string[] {
    const lines: string[] = [];
    for (const task of tasks.values()) {
      const itemsCount = task.items.length;
      const sampleItems = task.items.slice(0, 3)
        .map((item) => `${item.sku}√ó${item.quantity}`)
        .join(', ');
      const sampleText = sampleItems ? ` ‚Äî ${sampleItems}${itemsCount > 3 ? ', ‚Ä¶' : ''}` : '';
      lines.push(
        `‚Ä¢ *${task.taskId}* (${task.city} ‚Üí ${task.warehouseName || '–Ω–µ –∑–∞–¥–∞–Ω —Å–∫–ª–∞–¥'}) ‚Äî —Ç–æ–≤–∞—Ä–æ–≤: ${itemsCount}${sampleText}`,
      );
    }

    if (clusterLines.length) {
      lines.push('', '*–ö–ª–∞—Å—Ç–µ—Ä—ã –∏ —Å–∫–ª–∞–¥—ã:*');
      lines.push(...clusterLines);
    }

    return this.splitMessages(lines, 1500).map((chunk) => chunk.join('\n'));
  }

  private splitMessages(lines: string[], maxLen: number): string[][] {
    const chunks: string[][] = [];
    let current: string[] = [];
    let length = 0;

    for (const line of lines) {
      const lineLength = line.length + 1; // + newline
      if (length + lineLength > maxLen && current.length) {
        chunks.push(current);
        current = [];
        length = 0;
      }
      current.push(line);
      length += lineLength;
    }

    if (current.length) {
      chunks.push(current);
    }

    return chunks;
  }

  private async replyLines(
    ctx: Context,
    lines: string[],
    options?: Parameters<Context['reply']>[1],
    logLabel?: string,
  ): Promise<void> {
    const chunks = this.splitMessages(lines, 1500);
    this.logger.debug(
      `replyLines${logLabel ? ` (${logLabel})` : ''}: lines=${lines.length}, chunks=${chunks.length}, options=${
        options ? JSON.stringify(options) : 'none'
      }`,
    );
    for (const chunk of chunks) {
      await ctx.reply(chunk.join('\n'), options as any);
    }
  }

  private extractErrorPayload(error: unknown): string | undefined {
    const isAxios = (err: any) => err?.isAxiosError && (err.response || err.config);
    if (isAxios(error)) {
      const axiosError = error as any;
      const responseData = this.stringifySafe(axiosError.response?.data);
      const requestData = this.stringifySafe(axiosError.config?.data);
      const meta = [
        `url: ${axiosError.config?.url ?? 'n/a'}`,
        `method: ${axiosError.config?.method ?? 'n/a'}`,
        `status: ${axiosError.response?.status ?? 'n/a'}`,
        requestData ? `request: ${requestData}` : undefined,
        responseData ? `response: ${responseData}` : undefined,
      ]
        .filter(Boolean)
        .join('\n');
      return meta;
    }

    if (error instanceof Error) {
      return error.stack ?? error.message;
    }

    return undefined;
  }

  private async prefetchClusters(
    ctx: Context,
    chatId: string,
    credentials: OzonCredentials,
  ): Promise<void> {
    try {
      const clusters = await this.ozon.listClusters({}, credentials);
      if (!clusters.length) {
        await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ ‚Äî Ozon –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç.');
        return;
      }

      this.updateStoredClusters(chatId, clusters);
      const shortPreview = clusters
        .slice(0, 5)
        .map((cluster) => `${cluster.name ?? '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'} (ID: ${cluster.id})`);
      await this.replyLines(
        ctx,
        ['–ö–ª–∞—Å—Ç–µ—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü—Ä–∏–º–µ—Ä—ã:', ...shortPreview],
        undefined,
        'clusters-after-auth',
      );
    } catch (error) {
      this.logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∞—Å—Ç–µ—Ä—ã —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ auth: ${this.formatError(error)}`);
      await ctx.reply(
        '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∞—Å—Ç–µ—Ä—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/ozon_clusters`, —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑.',
      );
      await this.safeSendErrorPayload(ctx, error);
    }
  }

  private updateStoredClusters(chatId: string | undefined, clusters: OzonCluster[]): void {
    if (!chatId || !clusters?.length) {
      return;
    }

    const payload = clusters.map((cluster) => ({
      id: cluster.id,
      name: cluster.name ?? undefined,
    }));

    this.credentialsStore.updateClusters(chatId, payload);
  }

  private stringifySafe(value: unknown): string | undefined {
    if (value === undefined || value === null) {
      return undefined;
    }

    if (typeof value === 'string') {
      return value.length > 1200 ? `${value.slice(0, 1200)}‚Ä¶` : value;
    }

    try {
      const json = JSON.stringify(value, null, 2);
      return json.length > 1200 ? `${json.slice(0, 1200)}‚Ä¶` : json;
    } catch (error) {
      return undefined;
    }
  }
}

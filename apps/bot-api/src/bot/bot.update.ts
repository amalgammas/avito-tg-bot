import { Command, Ctx, Hears, Help, Message, On, Start, Update } from 'nestjs-telegraf';
import { Context } from 'telegraf';

import { OzonApiService, OzonCredentials } from '../config/ozon-api.service';
import { UserCredentialsStore } from './user-credentials.store';

@Update()
export class BotUpdate {
  private readonly helpMessage = [
    '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç–∞–≤–∫–∏ Ozon.',
    '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:',
    ' /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
    ' /help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É –ø–æ–¥—Å–∫–∞–∑–∫—É',
    ' /ping ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ (–∫–Ω–æ–ø–∫–∞ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤—è–∑—å¬ª)',
    ' /id ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å chat_id –∏ user_id',
    ' /ozon_auth <CLIENT_ID> <API_KEY> ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–ª—é—á–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Ö',
    ' /ozon_whoami ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥–∞–≤—Ü–µ –ø–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º –∫–ª—é—á–∞–º',
    ' /ozon_clear ‚Äî —É–¥–∞–ª–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∫–ª—é—á–∏',
    ' /ozon_me ‚Äî –ø—Ä–æ—Ñ–∏–ª—å –ø–æ –∫–ª—é—á–∞–º –∏–∑ .env',
    ' –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –î–∏–º–∞ ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–π –∏–∑ .env',
    '',
    '–ï—Å–ª–∏ –∫–ª—é—á–µ–π –Ω–µ—Ç ‚Äî –Ω–∞–∂–º–∏ ¬´–í–≤–µ—Å—Ç–∏ –∫–ª—é—á–∏¬ª –≤ –º–µ–Ω—é.',
  ].join('\n');

  constructor(
    private readonly ozon: OzonApiService,
    private readonly credentialsStore: UserCredentialsStore,
  ) {}

  @Start()
  async onStart(@Ctx() ctx: Context): Promise<void> {
    const chatId = this.extractChatId(ctx);
    const hasCredentials = chatId ? this.credentialsStore.has(chatId) : false;

    const intro = hasCredentials
      ? '–ö–ª—é—á–∏ –Ω–∞–π–¥–µ–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:'
      : '–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ Client ID –∏ API Key Ozon ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /ozon_auth.';

    await ctx.reply(intro, {
      reply_markup: {
        inline_keyboard: this.buildMenu(hasCredentials),
      },
    });
  }

  @Help()
  async onHelp(@Ctx() ctx: Context): Promise<void> {
    await ctx.reply(this.helpMessage);
  }

  @Command('ping')
  async onPing(@Ctx() ctx: Context): Promise<void> {
    await ctx.reply('pong üèì');
  }

  @Command('id')
  async onId(@Ctx() ctx: Context): Promise<void> {
    const chatId = (ctx.chat as any)?.id;
    const userId = (ctx.from as any)?.id;
    await ctx.reply(`chat_id: ${chatId}\nuser_id: ${userId}`);
  }

  @Command('ozon_auth')
  async onOzonAuth(@Ctx() ctx: Context): Promise<void> {
    const chatId = this.extractChatId(ctx);
    if (!chatId) {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º.');
      return;
    }

    const args = this.parseCommandArgs(ctx);
    if (args.length < 2) {
      await ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ozon_auth <CLIENT_ID> <API_KEY>');
      return;
    }

    const [clientId, apiKey] = args;
    const credentials: OzonCredentials = { clientId, apiKey };

    await ctx.reply('–ü—Ä–æ–≤–µ—Ä—è—é –∫–ª—é—á–∏ –≤ Ozon...');

    try {
      const { account } = await this.ozon.validateCredentials(credentials);
      this.credentialsStore.set(chatId, credentials);

      const summary = this.stringifyAccount(account);
      await ctx.reply(
        [
          '‚úÖ –ö–ª—é—á–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã.',
          summary ? `–ü—Ä–æ–¥–∞–≤–µ—Ü: ${summary}` : undefined,
          '–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /ozon_whoami.',
        ]
          .filter(Boolean)
          .join('\n'),
      );
    } catch (error) {
      await ctx.reply(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–ª—é—á–∏: ${this.formatError(error)}`);
    }
  }

  @Command('ozon_whoami')
  async onOzonWhoAmI(@Ctx() ctx: Context): Promise<void> {
    await this.handleOzonWhoAmI(ctx);
  }

  @Command('ozon_clear')
  async onOzonClear(@Ctx() ctx: Context): Promise<void> {
    const chatId = this.extractChatId(ctx);
    if (!chatId) {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º.');
      return;
    }

    if (!this.credentialsStore.has(chatId)) {
      await ctx.reply('–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π –Ω–µ—Ç.');
      return;
    }

    this.credentialsStore.clear(chatId);
    await ctx.reply('‚úÖ –ö–ª—é—á–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –ø–∞–º—è—Ç–∏ –±–æ—Ç–∞ (RAM).');
  }

  @Command('ozon_me')
  async onOzonMe(@Ctx() ctx: Context): Promise<void> {
    try {
      const profile = await this.ozon.getSellerInfo();
      await ctx.reply('```\n' + JSON.stringify(profile, null, 2) + '\n```', {
        parse_mode: 'Markdown',
      });
    } catch (error) {
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–æ—Ñ–∏–ª—è (env): ${this.formatError(error)}`);
    }
  }

  @On('callback_query')
  async onCallback(@Ctx() ctx: Context): Promise<void> {
    const data = (ctx.callbackQuery as any)?.data as string | undefined;
    if (!data) return;

    switch (data) {
      case 'action:enter_creds':
        await ctx.answerCbQuery();
        await ctx.reply(
          '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É `/ozon_auth <CLIENT_ID> <API_KEY>`\n' +
            '–ü—Ä–∏–º–µ—Ä: `/ozon_auth 123456 abcdef...`',
          { parse_mode: 'Markdown' },
        );
        break;
      case 'action:dima':
        await ctx.answerCbQuery();
        await this.handleEnvProfile(ctx, '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –î–∏–º–∞...');
        break;
      case 'action:ping':
        await ctx.answerCbQuery('pong üèì');
        await ctx.reply('pong üèì');
        break;
      case 'action:help':
        await ctx.answerCbQuery();
        await this.onHelp(ctx);
        break;
      case 'action:whoami':
        await ctx.answerCbQuery();
        await this.handleOzonWhoAmI(ctx);
        break;
      default:
        await ctx.answerCbQuery('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ');
        break;
    }
  }

  @Hears(/^–ø—Ä–∏–≤–µ—Ç$/i)
  async onHello(@Ctx() ctx: Context): Promise<void> {
    await ctx.reply('–ò —Ç–µ–±–µ –ø—Ä–∏–≤–µ—Ç! üëã');
  }

  @Hears(/^–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∏–º–∞$/i)
  async onUserDima(@Ctx() ctx: Context): Promise<void> {
    await this.handleEnvProfile(ctx, '–ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –î–∏–º–∞ –ø–æ –∫–ª—é—á–∞–º .env...');
  }

  @On('text')
  async onText(@Ctx() ctx: Context, @Message('text') text?: string): Promise<void> {
    if (!text || text.startsWith('/')) return;
    await ctx.reply('–ù–µ –ø–æ–Ω—è–ª –∑–∞–ø—Ä–æ—Å ü§î. –ù–∞–∂–º–∏ /help –∏–ª–∏ /start.');
  }

  private parseCommandArgs(ctx: Context): string[] {
    const messageText = (ctx.message as any)?.text ?? '';
    return messageText.trim().split(/\s+/).slice(1);
  }

  private extractChatId(ctx: Context): string | undefined {
    const chatId = (ctx.chat as any)?.id;
    if (typeof chatId === 'undefined' || chatId === null) {
      return undefined;
    }
    return String(chatId);
  }

  private stringifyAccount(account: unknown): string | undefined {
    if (!account || typeof account !== 'object') return undefined;
    const data = account as Record<string, unknown>;
    const name = data['name'] ?? data['legal_name'] ?? data['organization_name'];
    if (typeof name === 'string' && name.trim().length > 0) {
      return name.trim();
    }
    return undefined;
  }

  private formatError(error: unknown): string {
    if (!error) return 'unknown error';
    if (typeof error === 'string') return error;
    const asAny = error as any;
    if (asAny?.response?.data) {
      try {
        return JSON.stringify(asAny.response.data);
      } catch (err) {
        return asAny.message ?? '–û—à–∏–±–∫–∞ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è';
      }
    }
    return asAny?.message ?? '–û—à–∏–±–∫–∞ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è';
  }

  private buildMenu(hasCredentials: boolean) {
    if (!hasCredentials) {
      return [
        [{ text: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –î–∏–º–∞', callback_data: 'action:dima' }],
        [{ text: '–í–≤–µ—Å—Ç–∏ –∫–ª—é—á–∏', callback_data: 'action:enter_creds' }],
        [{ text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤—è–∑—å', callback_data: 'action:ping' }],
        [{ text: '–ü–æ–º–æ—â—å', callback_data: 'action:help' }],
      ];
    }

    return [
      [{ text: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –î–∏–º–∞', callback_data: 'action:dima' }],
      [{ text: '–ü—Ä–æ—Ñ–∏–ª—å Ozon', callback_data: 'action:whoami' }],
      [{ text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤—è–∑—å', callback_data: 'action:ping' }],
      [{ text: '–û–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á–∏', callback_data: 'action:enter_creds' }],
      [{ text: '–ü–æ–º–æ—â—å', callback_data: 'action:help' }],
    ];
  }

  private async handleOzonWhoAmI(ctx: Context): Promise<void> {
    const chatId = this.extractChatId(ctx);
    if (!chatId) {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º.');
      return;
    }

    const creds = this.credentialsStore.get(chatId);
    if (!creds) {
      await ctx.reply('–ö–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ozon_auth <CLIENT_ID> <API_KEY>.');
      return;
    }

    await ctx.reply('–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–æ–¥–∞–≤—Ü–∞ –≤ Ozon...');

    try {
      const profile = await this.ozon.getSellerInfo(creds);
      await ctx.reply('```\n' + JSON.stringify(profile, null, 2) + '\n```', {
        parse_mode: 'Markdown',
      });
    } catch (error) {
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–æ—Ñ–∏–ª—è: ${this.formatError(error)}`);
    }
  }

  private async handleEnvProfile(ctx: Context, intro?: string): Promise<void> {
    if (intro) {
      await ctx.reply(intro);
    }

    try {
      const profile = await this.ozon.getSellerInfo();
      await ctx.reply('```\n' + JSON.stringify(profile, null, 2) + '\n```', {
        parse_mode: 'Markdown',
      });
    } catch (error) {
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–ª—é—á–µ–π –∏–∑ .env: ${this.formatError(error)}`);
    }
  }
}

import { Command, Ctx, Help, Message, On, Start, Update } from 'nestjs-telegraf';
import { Logger } from '@nestjs/common';
import { Context } from 'telegraf';

import { SupplyWizardHandler } from './supply-wizard.handler';
import { UserCredentialsStore } from './user-credentials.store';
import { OzonApiService, OzonCredentials } from '../config/ozon-api.service';

@Update()
export class BotUpdate {
  private readonly logger = new Logger(BotUpdate.name);
  private readonly helpMessage = [
    '–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É –Ω–∞ Ozon:',
    ' 1. /ozon_auth <CLIENT_ID> <API_KEY> ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–ª—é—á–∏',
    ' 2. /ozon_supply ‚Äî –∑–∞–≥—Ä—É–∑–∏—Ç—å Excel (–ê—Ä—Ç–∏–∫—É–ª, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ) –∏ –ø—Ä–æ–π—Ç–∏ –≤—Å–µ —ç—Ç–∞–ø—ã',
    ' 3. /ozon_keys ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∫–ª—é—á–∏',
    ' 4. /ozon_clear ‚Äî —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á–∏ –∏–∑ –ø–∞–º—è—Ç–∏',
    '',
    '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:',
    ' /ping ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–æ—Ç–∞',
    ' /help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É –ø–æ–¥—Å–∫–∞–∑–∫—É',
  ].join('\n');

  constructor(
    private readonly wizard: SupplyWizardHandler,
    private readonly credentialsStore: UserCredentialsStore,
    private readonly ozonApi: OzonApiService,
  ) {}

  @Start()
  async onStart(@Ctx() ctx: Context): Promise<void> {
    const chatId = this.extractChatId(ctx);
    const hasCredentials = chatId ? this.credentialsStore.has(chatId) : false;
    const intro = hasCredentials
      ? '–ö–ª—é—á–∏ –Ω–∞–π–¥–µ–Ω—ã. –ì–æ—Ç–æ–≤ –ø—Ä–∏–Ω—è—Ç—å Excel-—Ñ–∞–π–ª ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å /ozon_supply.'
      : '–î–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ Client ID –∏ API Key Ozon —á–µ—Ä–µ–∑ /ozon_auth <CLIENT_ID> <API_KEY>.';

    await ctx.reply(intro);
  }

  @Help()
  async onHelp(@Ctx() ctx: Context): Promise<void> {
    await ctx.reply(this.helpMessage);
  }

  @Command('ping')
  async onPing(@Ctx() ctx: Context): Promise<void> {
    await ctx.reply('pong üèì');
  }

  @Command('id')
  async onId(@Ctx() ctx: Context): Promise<void> {
    const chatId = (ctx.chat as any)?.id;
    const userId = (ctx.from as any)?.id;
    await ctx.reply(`chat_id: ${chatId}\nuser_id: ${userId}`);
  }

  @Command('ozon_auth')
  async onOzonAuth(@Ctx() ctx: Context): Promise<void> {
    const chatId = this.extractChatId(ctx);
    if (!chatId) {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º.');
      return;
    }

    const args = this.parseCommandArgs(ctx);
    if (args.length < 2) {
      await ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ozon_auth <CLIENT_ID> <API_KEY>');
      return;
    }

    const [clientId, apiKey] = args;
    this.credentialsStore.set(chatId, { clientId, apiKey });

    await ctx.reply(
      [
        '‚úÖ –ö–ª—é—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.',
        '–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ /ozon_supply ‚Äî —è —Å–ø—Ä–æ—à—É –∫–ª–∞—Å—Ç–µ—Ä, —Å–∫–ª–∞–¥ –∏ –¥–∞—Ç—É, –∞ –∑–∞—Ç–µ–º —Å–æ–∑–¥–∞–º –ø–æ—Å—Ç–∞–≤–∫—É.',
      ].join('\n'),
    );

    await this.wizardWarmup(ctx, { clientId, apiKey });
  }

  @Command('ozon_clear')
  async onOzonClear(@Ctx() ctx: Context): Promise<void> {
    const chatId = this.extractChatId(ctx);
    if (!chatId) {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º.');
      return;
    }

    if (!this.credentialsStore.has(chatId)) {
      await ctx.reply('–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π –Ω–µ—Ç.');
      return;
    }

    this.credentialsStore.clear(chatId);
    await ctx.reply('‚úÖ –ö–ª—é—á–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –ø–∞–º—è—Ç–∏ –±–æ—Ç–∞.');
  }

  @Command('ozon_keys')
  async onOzonKeys(@Ctx() ctx: Context): Promise<void> {
    const entries = this.credentialsStore.entries();
    if (!entries.length) {
      await ctx.reply('–•—Ä–∞–Ω–∏–ª–∏—â–µ –ø—É—Å—Ç–æ–µ. –î–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á–∏ —á–µ—Ä–µ–∑ /ozon_auth.');
      return;
    }

    const lines = entries.map(({ chatId, credentials }) => {
      const updated = credentials.verifiedAt.toISOString();
      return `‚Ä¢ chat_id: ${chatId}, client_id: ${this.maskValue(credentials.clientId)}, api_key: ${this.maskValue(credentials.apiKey)}, updated: ${updated}`;
    });

    await ctx.reply(['–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∫–ª—é—á–∏ (–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω—ã):', ...lines].join('\n'));
  }

  @Command('ozon_supply')
  async onOzonSupply(@Ctx() ctx: Context): Promise<void> {
    await this.wizard.start(ctx);
  }

  @On('document')
  async onDocument(@Ctx() ctx: Context): Promise<void> {
    await this.wizard.handleDocument(ctx);
  }

  @On('text')
  async onText(@Ctx() ctx: Context, @Message('text') text?: string): Promise<void> {
    if (!text || text.startsWith('/')) {
      return;
    }

    const chatId = this.extractChatId(ctx);
    if (!chatId) {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º.');
      return;
    }

    const state = this.wizardState(chatId);
    if (!state) {
      await ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ozon_supply, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–∫–∏.');
      return;
    }

    if (state.stage === 'awaitSpreadsheet') {
      await this.wizard.handleSpreadsheetLink(ctx, text);
      return;
    }

    if (state.stage === 'awaitReadyDays') {
      await this.wizard.handleReadyDays(ctx, text);
      return;
    }

    await ctx.reply('–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ozon_supply.');
  }

  @On('callback_query')
  async onCallback(@Ctx() ctx: Context): Promise<void> {
    const data = (ctx.callbackQuery as any)?.data as string | undefined;
    if (!data) return;

    if (data.startsWith('wizard:')) {
      await this.wizard.handleCallback(ctx, data);
      return;
    }

    await ctx.answerCbQuery('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ');
  }

  private parseCommandArgs(ctx: Context): string[] {
    const messageText = (ctx.message as any)?.text ?? '';
    return messageText.trim().split(/\s+/).slice(1);
  }

  private extractChatId(ctx: Context): string | undefined {
    const chatId = (ctx.chat as any)?.id;
    if (typeof chatId === 'undefined' || chatId === null) {
      return undefined;
    }
    return String(chatId);
  }

  private maskValue(value: string): string {
    if (!value) return '‚Äî';
    if (value.length <= 6) {
      return `${value[0] ?? '*'}***${value[value.length - 1] ?? '*'}`;
    }
    return `${value.slice(0, 3)}***${value.slice(-3)}`;
  }

  private wizardState(chatId: string) {
    return this.wizard.getState(chatId);
  }

  private async wizardWarmup(ctx: Context, credentials: OzonCredentials): Promise<void> {
    this.logger.debug(`Credentials saved for wizard warmup: ${credentials.clientId}`);
    await ctx.reply('–ñ–¥—É –∑–∞–≥—Ä—É–∑–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–∑–∏—Ü–∏–π (–ê—Ä—Ç–∏–∫—É–ª + –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ).');
  }
}

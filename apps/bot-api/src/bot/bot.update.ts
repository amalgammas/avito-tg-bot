import { Ctx, Help, Message, On, Start, Update, Command, Hears } from 'nestjs-telegraf';
import { Context } from 'telegraf';

@Update()
export class BotUpdate {
    private readonly helpMessage = [
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å Avito API.',
        '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:',
        ' /start ‚Äî –º–µ–Ω—é –∏ –∫—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞',
        ' /help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É –ø–æ–¥—Å–∫–∞–∑–∫—É',
        ' /ping ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏',
        ' /id ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å chat_id –∏ user_id',
        ' /time ‚Äî —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞',
        '',
        '–ù–∞–ø–∏—à–∏ "–ø—Ä–∏–≤–µ—Ç" ‚Äî —è –æ—Ç–≤–µ—á—É üòâ',
    ].join('\n');

    @Start()
    async onStart(@Ctx() ctx: Context): Promise<void> {
        await ctx.reply(
            '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∏–∂–µ –±—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:',
            {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–ú–æ–π ID', callback_data: 'action:id' }],
                        [{ text: '–í—Ä–µ–º—è', callback_data: 'action:time' }],
                        [{ text: '–ü–æ–º–æ—â—å', callback_data: 'action:help' }],
                    ],
                },
            }
        );
    }

    @Help()
    async onHelp(@Ctx() ctx: Context): Promise<void> {
        await ctx.reply(this.helpMessage);
    }

    @Command('ping')
    async onPing(@Ctx() ctx: Context): Promise<void> {
        await ctx.reply('pong üèì');
    }

    @Command('id')
    async onId(@Ctx() ctx: Context): Promise<void> {
        const chatId = (ctx.chat as any)?.id;
        const userId = (ctx.from as any)?.id;
        await ctx.reply(`chat_id: ${chatId}\nuser_id: ${userId}`);
    }

    @Command('time')
    async onTime(@Ctx() ctx: Context): Promise<void> {
        await ctx.reply(`–í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: ${new Date().toISOString()}`);
    }

    // –ù–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    @On('callback_query')
    async onCallback(@Ctx() ctx: Context): Promise<void> {
        const data = (ctx.callbackQuery as any)?.data as string | undefined;
        if (!data) return;

        if (data === 'action:id') {
            const chatId = (ctx.chat as any)?.id;
            const userId = (ctx.from as any)?.id;
            await ctx.answerCbQuery();
            await ctx.reply(`chat_id: ${chatId}\nuser_id: ${userId}`);
            return;
        }

        if (data === 'action:time') {
            await ctx.answerCbQuery();
            await ctx.reply(`–í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: ${new Date().toISOString()}`);
            return;
        }

        if (data === 'action:help') {
            await ctx.answerCbQuery();
            await this.onHelp(ctx);
            return;
        }

        await ctx.answerCbQuery('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ');
    }

    // –ü—Ä–∏–º–µ—Ä –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–≥–æ ¬´—Å–ª—É—à–∞—Ç–µ–ª—è¬ª
    @Hears(/^–ø—Ä–∏–≤–µ—Ç$/i)
    async onHello(@Ctx() ctx: Context): Promise<void> {
        await ctx.reply('–ò —Ç–µ–±–µ –ø—Ä–∏–≤–µ—Ç! üëã');
    }

    // Fallback: —Ä–µ–∞–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç, –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    @On('text')
    async onText(@Ctx() ctx: Context, @Message('text') text?: string): Promise<void> {
        if (!text || text.startsWith('/')) return;
        await ctx.reply('–ù–µ –ø–æ–Ω—è–ª –∑–∞–ø—Ä–æ—Å ü§î. –ù–∞–∂–º–∏ /help –∏–ª–∏ /start.');
    }
}

import { Injectable } from '@nestjs/common';
import { Context } from 'telegraf';

import {
    SupplyWizardClusterOption,
    SupplyWizardDraftWarehouseOption,
    SupplyWizardDropOffOption,
    SupplyWizardOrderSummary,
    SupplyWizardState,
    SupplyWizardTimeslotOption,
    SupplyWizardWarehouseOption,
    SupplyWizardStore,
} from '../supply-wizard.store';
import { it } from "node:test";

@Injectable()
export class SupplyWizardViewService {
    private readonly draftWarehouseOptionsLimit = 20;
    private readonly timeslotOptionsLimit = 10;

    constructor(private readonly wizardStore: SupplyWizardStore) {}

    renderAuthWelcome(): string {
        return [
            '<b>–ü—Ä–∏–≤–µ—Ç! –Ø SmartStocker –ë–û–¢ ü§ñ</b>',
            '',
            '–Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ—Ç –Ω–∞ —Å–∫–ª–∞–¥—ã Ozon –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ',
            '',
            '–ü–æ–∫–∞ —á—Ç–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –∫—Ä–æ—Å—Å-–¥–æ–∫–∏–Ω–≥–æ–º.',
            '',
            '–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –≤–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –ü–æ—á–µ–º—É —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ –≥–¥–µ –≤–∑—è—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, —Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ https://smartstocker.ru/help/api',
            '',
            '–í–æ–ø—Ä–æ—Å—ã, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É https://t.me/dmitry_smartstocker'
        ].join('\n');
    }

    renderAuthInstruction(): string {
        return [
            '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–π API Ozon –±–æ—Ç—É –±–µ–∑–æ–ø–∞—Å–Ω–æ, –ø–æ—Ç–æ–º—É —á—Ç–æ –≤—ã–¥–∞–≤–∞–µ–º—ã–µ –ø—Ä–∞–≤–∞ –¥–∞—é—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±–æ—Ç—É –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å —Ä–∞–∑–¥–µ–ª–æ–º –ø–æ—Å—Ç–∞–≤–æ–∫.',
            '',
            '–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–æ–º–æ—â—å—é –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ API Ozon.',
            '',
            '–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –æ —Ç–æ–º, –≥–¥–µ –≤–∑—è—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ —Å—Å—ã–ª–∫–µ  https://smartstocker.ru/help/api',
            '',
            '–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º    https://smartstocker.ru/help/howto',
            '',
            'üîê –ß—Ç–æ–±—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è, –ø–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ Client ID –∏ API Key –∏–∑ –∫–∞–±–∏–Ω–µ—Ç–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞ Ozon.',
            '',
            'Client ID ‚Äî —ç—Ç–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏, –∞ API Key ‚Äî —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞.',
            '–°–æ–∑–¥–∞–π—Ç–µ –ø–∞—Ä—É –∫–ª—é—á–µ–π –≤ —Ä–∞–∑–¥–µ–ª–µ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã ‚Üí API –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏—Ö –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ.',
            '',
            '–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã, –Ω–∞–∂–º–∏—Ç–µ ¬´–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è¬ª.',
        ].join('\n');
    }

    buildAuthWelcomeKeyboard(): Array<Array<{ text: string; callback_data: string }>> {
        const rows = [
            [{ text: '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è', callback_data: 'wizard:auth:login' }],
            [{ text: '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', callback_data: 'wizard:auth:info' }],
        ];

        return this.withNavigation(rows);
    }

    buildAuthInstructionKeyboard(): Array<Array<{ text: string; callback_data: string }>> {
        return this.withNavigation([], { back: 'wizard:auth:back:welcome' });
    }

    renderAuthApiKeyPrompt(): string {
        return [
            '–í–≤–µ–¥–∏—Ç–µ API Key Ozon –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.',
            '',
            '–í—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫ jhg6tyr7-8j26-5kp9-bb0b-35y32kl46f07',
        ].join('\n');
    }

    buildAuthApiKeyKeyboard(): Array<Array<{ text: string; callback_data: string }>> {
        return this.withNavigation([], { back: 'wizard:auth:back:welcome' });
    }

    renderAuthClientIdPrompt(maskedApiKey?: string): string {
        const lines = [
            '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Client ID.',
        ];
        if (maskedApiKey) {
            lines.push(`API Key: ${maskedApiKey}`);
        }
        lines.push(
            '',
            '–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Client ID. Client ID, –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫ 2191549',
        );
        return lines.join('\n');
    }

    buildAuthClientIdKeyboard(): Array<Array<{ text: string; callback_data: string }>> {
        return this.withNavigation([], { back: 'wizard:auth:back:apiKey' });
    }

    renderLanding(state: SupplyWizardState): string {
        const lines = ['<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.</b>'];

        const pendingTasks = state.pendingTasks ?? [];
        if (pendingTasks.length) {
            const current = pendingTasks[pendingTasks.length - 1];
            lines.push(
                '',
                `–í –æ–±—Ä–∞–±–æ—Ç–∫–µ ${pendingTasks.length} ${pendingTasks.length === 1 ? '–∑–∞–¥–∞—á–∞' : '–∑–∞–¥–∞—á–∏'}.`,
            );
        }

        if (state.orders.length) {
            const last = state.orders[state.orders.length - 1];
            lines.push(
                '',
                `–ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ—Å—Ç–∞–≤–∫–∞: ‚Ññ ${last.operationId ?? last.id}${last.timeslotLabel ? ` ‚Äî —Å–ª–æ—Ç ${last.timeslotLabel}` : ''}.`,
                '–ò—Å—Ç–æ—Ä–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ú–æ–∏ –ø–æ—Å—Ç–∞–≤–∫–∏¬ª.',
            );
        } else {
            lines.push(
                '',
                '<b>–ù–∞–∂–º–∏—Ç–µ ¬´–ù–æ–≤–∞—è –ø–æ—Å—Ç–∞–≤–∫–∞¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ —Å–ª–æ—Ç–æ–≤.</b>'
            );
        }
        return lines.join('\n');
    }

    buildLandingKeyboard(state: SupplyWizardState): Array<Array<{ text: string; callback_data: string }>> {
        const rows: Array<Array<{ text: string; callback_data: string }>> = [
            [{ text: '–ù–æ–≤–∞—è –ø–æ—Å—Ç–∞–≤–∫–∞', callback_data: 'wizard:landing:start' }],
            [{ text: '–ú–æ–∏ –∑–∞–¥–∞—á–∏', callback_data: 'wizard:tasks:list' }],
        ];
        if (state.orders.length) {
            rows.push([{ text: '–ú–æ–∏ –ø–æ—Å—Ç–∞–≤–∫–∏', callback_data: 'wizard:orders:list' }]);
        }
        return rows;
    }

    renderUploadPrompt(): string {
        return [
            '<b>üì¶ –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Google Sheets —Å —Ç–æ–≤–∞—Ä–∞–º–∏.</b>',
            '',
            '–ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç Ozon –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤–æ–∫.',
            '',
            'https://disk.yandex.ru/i/a0vDXZdlImtPUA',
            '',
            '–ù–∞ –ª–∏—Å—Ç–µ 3 —Å—Ç–æ–ª–±—Ü–∞: –∞—Ä—Ç–∏–∫—É–ª, –∏–º—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ), –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ',
            '',
            '–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–∫–∞–∂—É —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –∏ –ø–µ—Ä–µ–π–¥—ë–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É.'
        ].join('\n');
    }

    buildUploadKeyboard(): Array<Array<{ text: string; callback_data: string }>> {
        return this.withNavigation([], { back: 'wizard:landing:back' });
    }

    buildDropOffQueryKeyboard(): Array<Array<{ text: string; callback_data: string }>> {
        return [
            [{ text: '–ù–∞–∑–∞–¥', callback_data: 'wizard:upload:restart' }],
            [{ text: '–û—Ç–º–µ–Ω–∞', callback_data: 'wizard:cancel' }],
        ];
    }

    renderReadyDaysPrompt(): string {
        return [
            '<b>–í—ã–±–µ—Ä–∏—Ç–µ, —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –∫ –æ—Ç–≥—Ä—É–∑–∫–µ.</b>',
            '',
            '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –ø–æ—Å—Ç–∞–≤–∫–∏. –¢–∞–π–º —Å–ª–æ—Ç –±—É–¥–µ—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 28.',
            '',
            '0 –¥–Ω–µ–π - –∑–Ω–∞—á–∏—Ç –≥–æ—Ç–æ–≤ –æ—Ç–≥—Ä—É–∑–∏—Ç—å—Å—è –¥–µ–Ω—å –≤ –¥–µ–Ω—å, –∏ –±–æ—Ç –º–æ–∂–µ—Ç –ª–æ–≤–∏—Ç—å —Å–ª–æ—Ç –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å.',
            '1 –¥–µ–Ω—å - –±–æ—Ç –±—É–¥–µ—Ç –ª–æ–≤–∏—Ç—å —Å–ª–æ—Ç –Ω–∞ –∑–∞–≤—Ç—Ä–∞, –∏ —Ç.–¥.',
        ].join('\n');
    }

    buildReadyDaysKeyboard(): Array<Array<{ text: string; callback_data: string }>> {
        const rows: Array<Array<{ text: string; callback_data: string }>> = [
            [
                { text: '0 –¥–Ω–µ–π', callback_data: 'wizard:ready:select:0' },
                { text: '1 –¥–µ–Ω—å', callback_data: 'wizard:ready:select:0' },
                { text: '2 –¥–Ω—è', callback_data: 'wizard:ready:select:2' },
            ],
            [
                { text: '3 –¥–Ω—è', callback_data: 'wizard:ready:select:3' },
                { text: '5 –¥–Ω–µ–π', callback_data: 'wizard:ready:select:5' },
                { text: '7 –¥–Ω–µ–π', callback_data: 'wizard:ready:select:7' },
            ],
            [
                { text: '14 –¥–Ω–µ–π', callback_data: 'wizard:ready:select:14' },
                { text: '21 –¥–µ–Ω—å', callback_data: 'wizard:ready:select:21' },
                { text: '28 –¥–Ω–µ–π', callback_data: 'wizard:ready:select:28' },
            ],
        ];

        return this.withCancel(rows);
    }

    renderOrdersList(state: SupplyWizardState): string {
        if (!state.orders.length) {
            return '–°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤–æ–∫ –ø—É—Å—Ç. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –ø–æ—Å—Ç–∞–≤–∫—É.';
        }

        const lines = ['–ú–æ–∏ –ø–æ—Å—Ç–∞–≤–∫–∏:'];
        state.orders.forEach((order, index) => {
            const arrival = order.arrival ? ` ‚Äî ${order.arrival}` : '';
            lines.push(`${index + 1}. ‚Ññ${order.id}${arrival}`);
        });
        lines.push('', '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∫—É, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏.');
        return lines.join('\n');
    }

    buildOrdersListKeyboard(state: SupplyWizardState): Array<Array<{ text: string; callback_data: string }>> {
        const rows = state.orders.map((order) => [
            {
                text: `‚Ññ${order.id}${order.arrival ? ` ‚Ä¢ ${order.arrival}` : ''}`,
                callback_data: `wizard:orders:details:${order.id}`,
            },
        ]);

        rows.push([{ text: '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–æ—Å—Ç–∞–≤–∫—É', callback_data: 'wizard:landing:start' }]);
        return this.withNavigation(rows, { back: 'wizard:orders:back' });
    }

    renderOrderDetails(order: SupplyWizardOrderSummary): string {
        const lines = [
            `–ü–æ—Å—Ç–∞–≤–∫–∞ ‚Ññ${order.operationId ?? order.id}`,
            order.clusterName ? `–ö–ª–∞—Å—Ç–µ—Ä: ${order.clusterName}` : undefined,
            order.dropOffName ? `–ü—É–Ω–∫—Ç —Å–¥–∞—á–∏: ${order.dropOffName}` : undefined,
            order.warehouse ? `–°–∫–ª–∞–¥: ${order.warehouse}` : undefined,
            order.timeslotLabel
                ? `–¢–∞–π–º—Å–ª–æ—Ç: ${order.timeslotLabel}`
                : order.arrival
                    ? `–í—Ä–µ–º—è –æ—Ç–≥—Ä—É–∑–∫–∏: ${order.arrival}`
                    : undefined,
            '',
            '–¢–æ–≤–∞—Ä—ã:',
            ...order.items.map((item) => `‚Ä¢ ${item.article} √ó ${item.quantity}`),
        ].filter((value): value is string => Boolean(value));
        return lines.join('\n');
    }

    buildOrderDetailsKeyboard(): Array<Array<{ text: string; callback_data: string }>> {
        const rows = [
            [{ text: '–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É', callback_data: 'wizard:orders:cancel' }],
        ];
        return this.withNavigation(rows, { back: 'wizard:orders:list' });
    }

    renderTasksList(state: SupplyWizardState): string {
        const pendingTasks = state.pendingTasks ?? [];
        if (!pendingTasks.length) {
            return '–¢—É—Ç –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –Ω–∞ –ø–æ–∏—Å–∫ —Å–ª–æ—Ç–æ–≤.' +
                '\n' +
                '–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –Ω–∞ –ø–æ–∏—Å–∫.';
        }

        const lines = ['–ú–æ–∏ –∑–∞–¥–∞—á–∏:'];
        pendingTasks.forEach((task, index) => {
            let items = 0;
            task.items.map((item) => items += item.quantity)

            const desc = `${this.formatTaskName(task.id)}: ${items}—à—Ç. ${task.items.length} —Ç–æ–≤–∞—Ä–æ–≤`
            const dropOff = task.dropOffName ? task.dropOffName : '';
            const cluster = task.clusterName ? task.clusterName : '';
            const warehouse = task.warehouse ? task.warehouse : '';

            lines.push(`${index + 1}. ${desc}. ${dropOff} ‚Üí ${cluster} ‚Üí ${warehouse}`);
        });
        lines.push(
            '',
            '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –µ—ë.'
        );

        return lines.join('\n');
    }

    buildTasksListKeyboard(state: SupplyWizardState): Array<Array<{ text: string; callback_data: string }>> {
        const pendingTasks = state.pendingTasks ?? [];
        const rows = pendingTasks.map((task) => [
            {
                text: `${this.formatTaskName(task.operationId ?? task.id)}`,
                callback_data: `wizard:tasks:details:${task.taskId ?? task.id}`,
            },
        ]);
        rows.push([{ text: '–ù–∞–∑–∞–¥', callback_data: 'wizard:tasks:back' }]);
        return rows;
    }

    renderTaskDetails(task: SupplyWizardOrderSummary): string {
        const limit = 20;
        const totalItems = task.items.length;
        const displayedItems = task.items.slice(0, limit);

        const lines = [
            `–ó–∞–¥–∞—á–∞ ${this.formatTaskName(task.operationId ?? task.id)}`,
            '',
            task.dropOffName ? `–ü—É–Ω–∫—Ç —Å–¥–∞—á–∏: ${task.dropOffName}` : undefined,
            task.clusterName ? `–ö–ª–∞—Å—Ç–µ—Ä: ${task.clusterName}` : undefined,
            task.warehouse ? `–°–∫–ª–∞–¥: ${task.warehouse}` : undefined,
            '',
            task.timeslotLabel ? `–¢–∞–π–º—Å–ª–æ—Ç: ${task.timeslotLabel}` : undefined,
            '',
            '–¢–æ–≤–∞—Ä—ã:',
            ...displayedItems.map((item) => `‚Ä¢ ${item.article} √ó ${item.quantity}`),
            ...(totalItems > limit
                ? [`‚Ä¶ –∏ –µ—â—ë ${totalItems - limit} –ø–æ–∑–∏—Ü–∏–π`]
                : []),
        ].filter((value): value is string => Boolean(value));
        return lines.join('\n');
    }

    buildTaskDetailsKeyboard(task: SupplyWizardOrderSummary): Array<Array<{ text: string; callback_data: string }>> {
        const rows = [
            [{ text: '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É', callback_data: `wizard:tasks:cancel:${task.taskId ?? task.id}` }],
        ];
        rows.push([{ text: '–ù–∞–∑–∞–¥', callback_data: 'wizard:tasks:list' }]);

        return rows;
    }

    renderSupplySuccess(order: SupplyWizardOrderSummary): string {
        const lines = [
            '–ü–æ—Å—Ç–∞–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ ‚úÖ',
            `ID: ${order.id}`,
            order.timeslotLabel ? `–¢–∞–π–º—Å–ª–æ—Ç: ${order.timeslotLabel}` : order.arrival ? `–í—Ä–µ–º—è –æ—Ç–≥—Ä—É–∑–∫–∏: ${order.arrival}` : undefined,
            order.warehouse ? `–°–∫–ª–∞–¥: ${order.warehouse}` : undefined,
        ].filter((value): value is string => Boolean(value));
        return lines.join('\n');
    }

    buildOptions(
        clusters: OzonClusterLike[],
    ): {
        clusters: SupplyWizardClusterOption[];
        warehouses: Record<number, SupplyWizardWarehouseOption[]>;
    } {
        const clusterOptions: SupplyWizardClusterOption[] = [];
        const clusterWarehouses = new Map<number, SupplyWizardWarehouseOption[]>();

        for (const cluster of clusters) {
            if (typeof cluster.id !== 'number') continue;
            const clusterId = Number(cluster.id);
            const clusterName = cluster.name?.trim() || `–ö–ª–∞—Å—Ç–µ—Ä ${clusterId}`;

            const rawWarehouses: SupplyWizardWarehouseOption[] = [];
            for (const logistic of cluster.logistic_clusters ?? []) {
                for (const warehouse of logistic.warehouses ?? []) {
                    if (typeof warehouse?.warehouse_id !== 'number') continue;
                    const warehouseId = Number(warehouse.warehouse_id);
                    if (!Number.isFinite(warehouseId)) continue;

                    rawWarehouses.push({
                        warehouse_id: warehouseId,
                        name: warehouse.name?.trim() || `–°–∫–ª–∞–¥ ${warehouseId}`,
                    });
                }
            }

            const uniqueWarehouses = this.deduplicateWarehouseOptions(rawWarehouses);
            clusterWarehouses.set(clusterId, uniqueWarehouses);

            clusterOptions.push({
                id: clusterId,
                name: clusterName,
                logistic_clusters: {
                    warehouses: uniqueWarehouses.map((item) => ({ ...item })),
                },
            });
        }

        const sortedClusters = clusterOptions.sort((a, b) =>
            a.name.localeCompare(b.name, 'ru', { sensitivity: 'base' }),
        );

        const warehousesByCluster = Object.fromEntries(clusterWarehouses.entries()) as Record<
            number,
            SupplyWizardWarehouseOption[]
        >;

        return {
            clusters: sortedClusters,
            warehouses: warehousesByCluster,
        };
    }

    mapDraftWarehouseOptions(info?: DraftStatusLike): SupplyWizardDraftWarehouseOption[] {
        if (!info?.clusters?.length) {
            return [];
        }

        const byWarehouse = new Map<number, SupplyWizardDraftWarehouseOption>();

        for (const cluster of info.clusters ?? []) {
            const parsedClusterId = this.parseNumber(cluster?.cluster_id);
            const clusterId = parsedClusterId ? Math.round(parsedClusterId) : undefined;
            const clusterName = cluster?.cluster_name?.trim() || undefined;

            for (const warehouseInfo of cluster?.warehouses ?? []) {
                if (!warehouseInfo) continue;
                const supplyWarehouse = warehouseInfo.supply_warehouse;
                const rawId = supplyWarehouse?.warehouse_id;
                const parsedId = this.parseNumber(rawId);
                if (!parsedId || parsedId <= 0) continue;
                const warehouseId = Math.round(parsedId);

                const totalRankRaw = this.parseNumber(warehouseInfo.total_rank);
                const totalRank = typeof totalRankRaw === 'number' ? totalRankRaw : undefined;
                const totalScore = this.parseNumber(warehouseInfo.total_score);
                const travelTimeDays = this.parseNullableNumber(warehouseInfo.travel_time_days);
                const bundle = warehouseInfo.bundle_ids?.[0];

                const option: SupplyWizardDraftWarehouseOption = {
                    warehouseId,
                    name: supplyWarehouse?.name?.trim() || `–°–∫–ª–∞–¥ ${warehouseId}`,
                    address: supplyWarehouse?.address?.trim() || undefined,
                    clusterId: clusterId,
                    clusterName,
                    totalRank,
                    totalScore,
                    travelTimeDays: typeof travelTimeDays === 'number' ? travelTimeDays : null,
                    isAvailable: warehouseInfo.status?.is_available,
                    statusState: warehouseInfo.status?.state,
                    statusReason: warehouseInfo.status?.invalid_reason,
                    bundleId: bundle?.bundle_id || undefined,
                    restrictedBundleId: warehouseInfo.restricted_bundle_id || undefined,
                };

                const existing = byWarehouse.get(warehouseId);
                if (!existing) {
                    byWarehouse.set(warehouseId, option);
                    continue;
                }

                const existingRank = existing.totalRank ?? Number.POSITIVE_INFINITY;
                const candidateRank = option.totalRank ?? Number.POSITIVE_INFINITY;
                if (candidateRank < existingRank) {
                    byWarehouse.set(warehouseId, option);
                }
            }
        }

        return [...byWarehouse.values()].sort((a, b) => {
            const rankA = a.totalRank ?? Number.POSITIVE_INFINITY;
            const rankB = b.totalRank ?? Number.POSITIVE_INFINITY;
            if (rankA !== rankB) return rankA - rankB;

            const scoreA = a.totalScore ?? -Number.POSITIVE_INFINITY;
            const scoreB = b.totalScore ?? -Number.POSITIVE_INFINITY;
            if (scoreA !== scoreB) return scoreB - scoreA;

            return (a.name ?? '').localeCompare(b.name ?? '', 'ru', { sensitivity: 'base' });
        });
    }

    limitDraftWarehouseOptions(options: SupplyWizardDraftWarehouseOption[]): {
        limited: SupplyWizardDraftWarehouseOption[];
        truncated: boolean;
    } {
        const limited = options.slice(0, this.draftWarehouseOptionsLimit);
        return {
            limited,
            truncated: limited.length < options.length,
        };
    }

    formatDraftWarehouseSummary(options: SupplyWizardDraftWarehouseOption[]): string[] {
        const lines: string[] = [];

        options.forEach((option, index) => {
            const rank = option.totalRank ?? index + 1;
            const icon = option.isAvailable === false ? '‚ö†Ô∏è' : option.isAvailable === true ? '‚úÖ' : '‚ÑπÔ∏è';
            const name = option.name ?? `–°–∫–ª–∞–¥ ${option.warehouseId}`;
            const travelPart =
                typeof option.travelTimeDays === 'number' ? `, –ø—É—Ç—å ‚âà ${option.travelTimeDays} –¥–Ω.` : '';
            const scorePart = typeof option.totalScore === 'number' ? `, score ${option.totalScore.toFixed(3)}` : '';
            const statusPart = option.isAvailable === false && option.statusReason ? ` ‚Äî ${option.statusReason}` : '';

            lines.push(`${rank}. ${icon} ${name} (${option.warehouseId})${travelPart}${scorePart}${statusPart}`);

            if (option.address) {
                lines.push(`   –ê–¥—Ä–µ—Å: ${option.address}`);
            }
        });

        return lines;
    }

    formatTimeslotSummary(options: SupplyWizardTimeslotOption[]): string[] {
        return options.map((option, index) => this.formatTimeslotButtonLabel(option, index));
    }

    buildTimeslotKeyboard(
        state: SupplyWizardState,
    ): Array<Array<{ text: string; callback_data: string }>> {
        const rows = state.draftTimeslots.slice(0, this.timeslotOptionsLimit).map((option, index) => [
            {
                text: this.formatTimeslotButtonLabel(option, index),
                callback_data: `wizard:timeslot:${option.id}`,
            },
        ]);
        return this.withCancel(rows);
    }

    describeWarehouseSelection(
        option: SupplyWizardDraftWarehouseOption,
        state: SupplyWizardState,
    ): string[] {
        const lines = [`–°–∫–ª–∞–¥ –≤—ã–±—Ä–∞–Ω: ${option.name} (${option.warehouseId}).`];
        if (option.address) {
            lines.push(`–ê–¥—Ä–µ—Å: ${option.address}.`);
        }

        const dropOffLabel =
            state.selectedDropOffName ?? (state.selectedDropOffId ? String(state.selectedDropOffId) : undefined);
        if (dropOffLabel) {
            lines.push(`–ü—É–Ω–∫—Ç —Å–¥–∞—á–∏: ${dropOffLabel}.`);
        }

        const clusterLabel =
            option.clusterName ??
            state.selectedClusterName ??
            (state.selectedClusterId ? `–ö–ª–∞—Å—Ç–µ—Ä ${state.selectedClusterId}` : undefined);
        if (clusterLabel) {
            lines.push(`–ö–ª–∞—Å—Ç–µ—Ä: ${clusterLabel}.`);
        }

        const metaParts: string[] = [];
        if (typeof option.totalRank === 'number') {
            metaParts.push(`—Ä–∞–Ω–≥ ${option.totalRank}`);
        }

        if (typeof option.totalScore === 'number') {
            metaParts.push(`score ${option.totalScore.toFixed(3)}`);
        }

        if (option.travelTimeDays !== undefined && option.travelTimeDays !== null) {
            metaParts.push(`–ø—É—Ç—å ‚âà ${option.travelTimeDays} –¥–Ω.`);
        }

        if (metaParts.length) {
            lines.push(`–û—Ü–µ–Ω–∫–∞ Ozon: ${metaParts.join(', ')}.`);
        }

        if (option.restrictedBundleId) {
            lines.push(`–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: bundle ${option.restrictedBundleId}.`);
        }

        if (option.isAvailable === false && option.statusReason) {
            lines.push(`‚ö†Ô∏è –°—Ç–∞—Ç—É—Å Ozon: ${option.statusReason}.`);
        } else if (option.isAvailable === false) {
            lines.push('‚ö†Ô∏è Ozon –ø–æ–º–µ—Ç–∏–ª —Å–∫–ª–∞–¥ –∫–∞–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π.');
        } else if (option.isAvailable === true) {
            lines.push('‚úÖ Ozon –æ—Ç–º–µ—á–∞–µ—Ç —Å–∫–ª–∞–¥ –∫–∞–∫ –¥–æ—Å—Ç—É–ø–Ω—ã–π.');
        }

        return lines;
    }

    buildDropOffKeyboard(
        state: SupplyWizardState,
    ): Array<Array<{ text: string; callback_data: string }>> {
        const rows = state.dropOffs.map((option) => [
            {
                text: this.formatDropOffButtonLabel(option),
                callback_data: `wizard:dropoff:${option.warehouse_id}`,
            },
        ]);
        return [
            ...rows,
            [{ text: '–ù–∞–∑–∞–¥', callback_data: 'wizard:upload:restart' }],
            [{ text: '–û—Ç–º–µ–Ω–∞', callback_data: 'wizard:cancel' }],
        ];
    }

    buildDraftWarehouseKeyboard(
        state: SupplyWizardState,
    ): Array<Array<{ text: string; callback_data: string }>> {
        const source = state.draftWarehouses.slice(0, this.draftWarehouseOptionsLimit);
        const rows = source.map((option, index) => [
            {
                text: this.formatDraftWarehouseButtonLabel(option, index),
                callback_data: `wizard:draftWarehouse:${option.warehouseId}`,
            },
        ]);
        return this.withCancel(rows);
    }

    renderWarehouseSelection(params: {
        clusterName?: string;
        dropOffLabel?: string;
        total: number;
        filteredTotal: number;
        page: number;
        pageCount: number;
        searchQuery?: string;
    }): string {
        const lines: string[] = [];

        if (params.clusterName) {
            lines.push(`–ö–ª–∞—Å—Ç–µ—Ä: ${params.clusterName}.`);
        }
        if (params.dropOffLabel) {
            lines.push(`–ü—É–Ω–∫—Ç —Å–¥–∞—á–∏: ${params.dropOffLabel}.`);
        }

        const search = params.searchQuery?.trim();
        if (search) {
            lines.push(`–ü–æ–∏—Å–∫: ¬´${search}¬ª.`);
        }

        if (params.filteredTotal > 0) {
            lines.push(
                '',
                '<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–ª–æ—Ç–æ–≤.</b>',
                '',
                '<b>–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É –≤ –ª—é–±–æ–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–∫–ª–∞–¥ –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ, —Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç ‚Äú–ü–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π‚Äù.</b>',
                '',
                '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É –Ω–∞ <b>–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π</b> —Å–∫–ª–∞–¥ –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ, –≤—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ –≤ —Å–ø–∏—Å–∫–µ –Ω–∏–∂–µ. –í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥ –∫–Ω–æ–ø–∫–æ–π –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è / –Ω–æ–º–µ—Ä–∞, —á—Ç–æ–±—ã –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫.',
                ''
            );

            const totalInfo = params.total !== params.filteredTotal
                ? `${params.filteredTotal} –∏–∑ ${params.total}`
                : `${params.filteredTotal}`;
            lines.push(`–í—Å–µ–≥–æ —Å–∫–ª–∞–¥–æ–≤ –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ: ${totalInfo}`);
        } else {
            lines.push(
                '',
                '–°–∫–ª–∞–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ ID, —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç.',
            );
        }

        return lines.join('\n');
    }

    buildClusterWarehouseKeyboard(params: {
        items: SupplyWizardWarehouseOption[];
        page: number;
        pageCount: number;
        hasPrev: boolean;
        hasNext: boolean;
        includeAuto: boolean;
        searchActive: boolean;
        includeBackToCluster?: boolean;
    }): Array<Array<{ text: string; callback_data: string }>> {
        const rows: Array<Array<{ text: string; callback_data: string }>> = [];

        if (params.includeAuto) {
            rows.push([{ text: '–ü–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π ü•á', callback_data: 'wizard:warehouse:auto' }]);
        }

        params.items.forEach((warehouse) => {
            rows.push([
                {
                    text: `${warehouse.name} (${warehouse.warehouse_id})`,
                    callback_data: `wizard:warehouse:${warehouse.warehouse_id}`,
                },
            ]);
        });

        if (params.searchActive) {
            rows.push([{ text: '–°–±—Ä–æ—Å–∏—Ç—å –ø–æ–∏—Å–∫', callback_data: 'wizard:warehouse:search:clear' }]);
        }

        if (params.pageCount > 1) {
            const navRow: Array<{ text: string; callback_data: string }> = [];
            navRow.push({
                text: '‚¨ÖÔ∏è',
                callback_data: params.hasPrev ? 'wizard:warehouse:page:prev' : 'wizard:warehouse:noop',
            });
            navRow.push({
                text: `${params.page + 1}/${params.pageCount}`,
                callback_data: 'wizard:warehouse:noop',
            });
            navRow.push({
                text: '‚û°Ô∏è',
                callback_data: params.hasNext ? 'wizard:warehouse:page:next' : 'wizard:warehouse:noop',
            });
            rows.push(navRow);
        }

        if (params.includeBackToCluster) {
            rows.push([
                {
                    text: '‚Üê –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∫–ª–∞—Å—Ç–µ—Ä',
                    callback_data: 'wizard:warehouse:backToClusters',
                },
            ]);
        }

        return this.withCancel(rows);
    }

    buildClusterKeyboard(state: SupplyWizardState): Array<Array<{ text: string; callback_data: string }>> {
        const rows = state.clusters.map((cluster) => [
            {
                text: `${cluster.name}`,
                callback_data: `wizard:cluster:${cluster.id}`,
            },
        ]);
        return this.withCancel(rows);
    }

    buildWarehouseKeyboard(
        state: SupplyWizardState,
        clusterId: number,
    ): Array<Array<{ text: string; callback_data: string }>> {
        const warehouses = state.warehouses[clusterId] ?? [];
        const rows = warehouses.map((warehouse) => [
            {
                text: warehouse.name,
                callback_data: `wizard:warehouse:${warehouse.warehouse_id}`,
            },
        ]);
        return this.withCancel(rows);
    }

    buildClusterStartKeyboard(): Array<Array<{ text: string; callback_data: string }>> {
        return [[{ text: '–í—ã–±—Ä–∞—Ç—å –∫–ª–∞—Å—Ç–µ—Ä', callback_data: 'wizard:clusterStart' }]];
    }

    withCancel(
        rows: Array<Array<{ text: string; callback_data: string }>> = [],
    ): Array<Array<{ text: string; callback_data: string }>> {
        return this.withNavigation(rows);
    }

    withNavigation(
        rows: Array<Array<{ text: string; callback_data: string }>> = [],
        options: { back?: string, cancel?: string } = {},
    ): Array<Array<{ text: string; callback_data: string }>> {
        const keyboard = [...rows];
        if (options.back) {
            keyboard.push([{ text: '–ù–∞–∑–∞–¥', callback_data: options.back }]);
        } else if (options.cancel) {
            keyboard.push([{ text: '–û—Ç–º–µ–Ω–∞', callback_data: 'wizard:cancel' }]);
        }

        return keyboard;
    }

    async updatePrompt(
        ctx: Context,
        chatId: string,
        state: SupplyWizardState,
        text: string,
        keyboard?: Array<Array<{ text: string; callback_data: string }>>,
        options: { parseMode?: 'Markdown' | 'MarkdownV2' | 'HTML' } = {},
    ): Promise<void> {
        const rawChatId = (ctx.callbackQuery as any)?.message?.chat?.id ?? chatId;
        const messageId = state.promptMessageId;
        const replyMarkup = keyboard ? { inline_keyboard: keyboard } : undefined;
        const replyOptions: Record<string, unknown> = {};

        if (replyMarkup) {
            replyOptions.reply_markup = replyMarkup;
        }

        if (options.parseMode) {
            replyOptions.parse_mode = options.parseMode;
        }

        if (messageId) {
            try {
                await ctx.telegram.deleteMessage(rawChatId, messageId);
            } catch (error) {
                // –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —É–¥–∞–ª–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏–∂–µ
            }
            this.wizardStore.update(chatId, (current) => {
                if (!current) return undefined;
                if (current.promptMessageId !== messageId) {
                    return current;
                }
                return { ...current, promptMessageId: undefined };
            });
        }

        const sent = await ctx.reply(text, replyOptions as any);
        this.wizardStore.update(chatId, (current) => {
            if (!current) return undefined;
            return { ...current, promptMessageId: (sent as any)?.message_id ?? current.promptMessageId };
        });
    }

    async sendErrorDetails(ctx: Context, payload: string[] | string | undefined): Promise<void> {
        if (!payload) return;

        const lines = Array.isArray(payload) ? payload : payload.split(/\r?\n/);
        await ctx.reply(['–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', '```', ...lines, '```'].join('\n'), {
            parse_mode: 'Markdown',
        });
    }

    formatItemsSummary(task: { items: Array<{ article: string; sku?: number; quantity: number }> }): string {
        const limit = 20;
        const total = task.items.length;
        const displayed = task.items.slice(0, limit);
        const lines = displayed.map((item) => `‚Ä¢ ${item.article} ‚Üí SKU ${item.sku} √ó ${item.quantity}`);

        if (total > limit) {
            lines.push(`‚Ä¶ –∏ –µ—â—ë ${total - limit} –ø–æ–∑–∏—Ü–∏–π –±–µ–∑ –≤—ã–≤–æ–¥–∞, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —á–∞—Ç.`);
        }

        return [
            '–¢–æ–≤–∞—Ä—ã –∏–∑ —Ñ–∞–π–ª–∞:',
            ...lines,
            '',
            '<b>–°–µ–π—á–∞—Å –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –∫—Ä–æ—Å—Å-–¥–æ–∫–∏–Ω–≥–æ–º.</b>',
            '',
            '–î–∞–ª–µ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ç–æ—á–∫—É –¥–ª—è —Å–¥–∞—á–∏ –ø–æ—Å—Ç–∞–≤–∫–∏ –ø–æ –∫—Ä–æ—Å—Å-–¥–æ–∫–∏–Ω–≥—É',
            '',
            '<b>–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∂–µ –≥–æ—Ä–æ–¥, –∞–¥—Ä–µ—Å –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—É–Ω–∫—Ç–∞ —Å–¥–∞—á–∏ –ø–æ—Å—Ç–∞–≤–æ–∫ –∫—Ä–æ—Å—Å-–¥–æ–∫–∏–Ω–≥.</b>'
        ].join('\n');
    }

    formatSupplyEvent(result: { taskId: string; event: string; message?: string }): string | undefined {
        const prefix = `[${result.taskId}]`;
        switch (result.event) {
            case 'draftCreated':
                return `${prefix} –ß–µ—Ä–Ω–æ–≤–∏–∫ —Å–æ–∑–¥–∞–Ω. ${result.message ?? ''}`.trim();
            case 'draftValid':
                return `${prefix} –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–µ—Ä–Ω–æ–≤–∏–∫. ${result.message ?? ''}`.trim();
            case 'draftExpired':
                return `${prefix} –ß–µ—Ä–Ω–æ–≤–∏–∫ —É—Å—Ç–∞—Ä–µ–ª, —Å–æ–∑–¥–∞—ë–º –∑–∞–Ω–æ–≤–æ.`;
            case 'draftInvalid':
                return `${prefix} –ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π, –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º.`;
            case 'draftError':
                return `${prefix} –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–Ω–æ–≤–∏–∫–∞.${result.message ? ` ${result.message}` : ''}`;
            case 'timeslotMissing':
                return `${prefix} –°–≤–æ–±–æ–¥–Ω—ã—Ö —Ç–∞–π–º—Å–ª–æ—Ç–æ–≤ –Ω–µ—Ç.`;
            case 'supplyCreated':
                return `${prefix} ‚úÖ –ü–æ—Å—Ç–∞–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞. ${result.message ?? ''}`.trim();
            case 'supplyStatus':
                return `${prefix} ${result.message ?? '–°—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª—ë–Ω.'}`.trim();
            case 'noCredentials':
            case 'error':
                return `${prefix} ‚ùå ${result.message ?? '–û—à–∏–±–∫–∞'}`;
            default:
                return result.message ? `${prefix} ${result.message}` : undefined;
        }
    }

    mapTimeslotOptions(response?: TimeslotResponseLike): SupplyWizardTimeslotOption[] {
        const options: SupplyWizardTimeslotOption[] = [];
        if (!response?.drop_off_warehouse_timeslots?.length) {
            return options;
        }

        const seen = new Set<string>();
        for (const bucket of response.drop_off_warehouse_timeslots ?? []) {
            const timezone = bucket?.warehouse_timezone;
            for (const day of bucket?.days ?? []) {
                for (const slot of day?.timeslots ?? []) {
                    const from = slot?.from_in_timezone;
                    const to = slot?.to_in_timezone;
                    if (!from || !to) {
                        continue;
                    }
                    const fingerprint = `${from}|${to}|${timezone ?? ''}`;
                    if (seen.has(fingerprint)) {
                        continue;
                    }
                    seen.add(fingerprint);
                    const id = `${options.length}`;
                    options.push({
                        id,
                        from,
                        to,
                        label: this.formatTimeslotLabel(from, to, timezone),
                        data: {
                            from_in_timezone: from,
                            to_in_timezone: to,
                        },
                    });
                }
            }
        }

        return options;
    }

    limitTimeslotOptions(options: SupplyWizardTimeslotOption[]): {
        limited: SupplyWizardTimeslotOption[];
        truncated: boolean;
    } {
        const limited = options.slice(0, this.timeslotOptionsLimit);
        return {
            limited,
            truncated: limited.length < options.length,
        };
    }

    collectTimeslotWarehouseIds(
        state: SupplyWizardState,
        option: SupplyWizardDraftWarehouseOption,
    ): string[] {
        const warehouseId = option?.warehouseId ?? state.selectedWarehouseId;
        return warehouseId ? [String(warehouseId)] : [];
    }

    private deduplicateWarehouseOptions(
        entries: SupplyWizardWarehouseOption[],
    ): SupplyWizardWarehouseOption[] {
        const map = new Map<number, SupplyWizardWarehouseOption>();
        for (const entry of entries) {
            if (!entry || typeof entry.warehouse_id !== 'number') continue;
            if (!map.has(entry.warehouse_id)) {
                map.set(entry.warehouse_id, entry);
            }
        }
        return [...map.values()].sort((a, b) => a.name.localeCompare(b.name, 'ru', { sensitivity: 'base' }));
    }

    private formatTimeslotButtonLabel(option: SupplyWizardTimeslotOption, index: number): string {
        return this.truncate(`${index + 1}. ${option.label}`, 60);
    }

    private formatTimeslotLabel(fromIso: string, toIso: string, timezone?: string): string {
        const fromDate = new Date(fromIso);
        const toDate = new Date(toIso);

        if (Number.isNaN(fromDate.getTime()) || Number.isNaN(toDate.getTime())) {
            return `${fromIso} ‚Üí ${toIso}${timezone ? ` (${timezone})` : ''}`;
        }

        const dateFormatter = new Intl.DateTimeFormat('ru-RU', {
            day: '2-digit',
            month: '2-digit',
        });
        const timeFormatter = new Intl.DateTimeFormat('ru-RU', {
            hour: '2-digit',
            minute: '2-digit',
        });

        const datePart = dateFormatter.format(fromDate);
        const fromPart = timeFormatter.format(fromDate);
        const toPart = timeFormatter.format(toDate);
        const timezonePart = timezone ? ` (${timezone})` : '';

        return `${datePart} ${fromPart}‚Äì${toPart}${timezonePart}`;
    }

    private formatTaskName(name: string | undefined): string | undefined {
        if (name) {
            const names = name.split('-');
            return names[1];
        }
    }

    private formatDropOffButtonLabel(option: SupplyWizardDropOffOption): string {
        const base = option.name ?? `–ü—É–Ω–∫—Ç ${option.warehouse_id}`;
        return this.truncate(`${base}`, 60);
    }

    private formatDraftWarehouseButtonLabel(
        option: SupplyWizardDraftWarehouseOption,
        index: number,
    ): string {
        const rank = option.totalRank ?? index + 1;
        const icon = option.isAvailable === false ? '‚ö†Ô∏è' : option.isAvailable === true ? '‚úÖ' : '‚ÑπÔ∏è';
        const base = `${rank}. ${icon} ${option.name ?? option.warehouseId}`;
        return this.truncate(base, 60);
    }

    private truncate(value: string, maxLength = 60): string {
        if (value.length <= maxLength) {
            return value;
        }
        return `${value.slice(0, Math.max(0, maxLength - 1))}‚Ä¶`;
    }

    private parseNumber(value: unknown): number | undefined {
        if (typeof value === 'number' && Number.isFinite(value)) {
            return value;
        }
        if (typeof value === 'string') {
            const trimmed = value.trim();
            if (!trimmed) {
                return undefined;
            }
            const parsed = Number(trimmed);
            if (Number.isFinite(parsed)) {
                return parsed;
            }
        }
        return undefined;
    }

    private parseNullableNumber(value: unknown): number | null | undefined {
        if (value === null) {
            return null;
        }
        return this.parseNumber(value);
    }

}

export interface OzonClusterLike {
    id?: number;
    name?: string;
    logistic_clusters?: Array<{
        warehouses?: Array<{
            warehouse_id?: number;
            name?: string;
            type?: string | number;
        }>;
    }>;
}

export interface DraftStatusLike {
    clusters?: Array<{
        cluster_id?: number | string;
        cluster_name?: string;
        warehouses?: Array<{
            bundle_ids?: Array<{ bundle_id?: string; is_docless?: boolean }>;
            supply_warehouse?: {
                warehouse_id?: number | string;
                name?: string;
                address?: string;
            };
            total_rank?: number | string;
            total_score?: number | string;
            travel_time_days?: number | string | null;
            status?: {
                state?: string;
                invalid_reason?: string;
                is_available?: boolean;
            };
            restricted_bundle_id?: string;
        }>;
    }>;
}

export interface TimeslotResponseLike {
    drop_off_warehouse_timeslots?: Array<{
        drop_off_warehouse_id?: number | string;
        warehouse_timezone?: string;
        current_time_in_timezone?: string;
        days?: Array<{
            timeslots?: Array<{
                from_in_timezone?: string;
                to_in_timezone?: string;
            }>;
        }>;
    }>;
}
